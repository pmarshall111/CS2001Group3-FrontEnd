[{"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/index.js":"1","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailInquiry.js":"2","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/helper/convertTimestampToDate.js":"3","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/config.js":"4","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailPage.js":"5","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailPreview.js":"6","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/reportWebVitals.js":"7","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailConfirmation.js":"8","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/App.js":"9","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/pharmacy/PharmacyPage.js":"10","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/ListDetailsCompoenet.jsx":"11","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/pharmacy/PharmacyPreview.js":"12","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/shared/List.js":"13","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/MedicationsDetails.js":"14","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Dashboard/Dashboard.jsx":"15","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Login/LoginComponent.jsx":"16","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Login/LogoutComponent.jsx":"17","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Login/AuthenticatedRoute.jsx":"18","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Login/AuthenticationService.js":"19","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Login/HeaderComponent.jsx":"20","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Login/WelcomeComponent.jsx":"21","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Login/FooterComponent.jsx":"22","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Login/App.jsx":"23"},{"size":500,"mtime":1609075878888,"results":"24","hashOfConfig":"25"},{"size":2712,"mtime":1609076484681,"results":"26","hashOfConfig":"25"},{"size":293,"mtime":1609076484683,"results":"27","hashOfConfig":"25"},{"size":302,"mtime":1609078190173,"results":"28","hashOfConfig":"25"},{"size":2773,"mtime":1609076484682,"results":"29","hashOfConfig":"25"},{"size":1202,"mtime":1609076484683,"results":"30","hashOfConfig":"25"},{"size":362,"mtime":1609075878890,"results":"31","hashOfConfig":"25"},{"size":3618,"mtime":1609076484681,"results":"32","hashOfConfig":"25"},{"size":1168,"mtime":1613737213388,"results":"33","hashOfConfig":"25"},{"size":2214,"mtime":1609076484684,"results":"34","hashOfConfig":"25"},{"size":1496,"mtime":1613479984930,"results":"35","hashOfConfig":"25"},{"size":889,"mtime":1609075878890,"results":"36","hashOfConfig":"25"},{"size":421,"mtime":1609076484686,"results":"37","hashOfConfig":"25"},{"size":245,"mtime":1611514465364,"results":"38","hashOfConfig":"25"},{"size":3948,"mtime":1614020606952,"results":"39","hashOfConfig":"25"},{"size":2356,"mtime":1613673974206,"results":"40","hashOfConfig":"25"},{"size":388,"mtime":1613738051392,"results":"41","hashOfConfig":"25"},{"size":404,"mtime":1613673533159,"results":"42","hashOfConfig":"25"},{"size":440,"mtime":1613673555120,"results":"43","hashOfConfig":"25"},{"size":1535,"mtime":1613736604863,"results":"44","hashOfConfig":"25"},{"size":4611,"mtime":1614082334636,"results":"45","hashOfConfig":"25"},{"size":471,"mtime":1613738273246,"results":"46","hashOfConfig":"25"},{"size":1552,"mtime":1614082489702,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1tbvtix",{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"50"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/index.js",[],["105","106"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailInquiry.js",["107"],"import React, {useEffect, useState} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport {backendUrl} from \"../config\";\nimport FullPageCentered from \"../shared/FullPageCentered\";\nimport List from \"../shared/List\";\nimport Quote from \"../shared/Quote\";\n\nconst EmailInquiry = (props) => {\n    const [comment, setComment] = useState(\"\");\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [careHomeName, setCareHomeName] = useState(\"-\");\n    const [residentName, setResidentName] = useState(\"-\");\n    const [medication, setMedication] = useState(\"-\");\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\n\n    //method to get the details of the medication from the database once the page loads\n    useEffect(() => {\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\n            .then(r => r.json())\n            .then(resp => {\n                console.log(resp);\n                setCareHomeName(resp.careHomeName || \"-\");\n                setResidentName(resp.residentName || \"-\");\n                setMedication(resp.medicationName || \"-\");\n                setComment(resp.pharmacyComment || \"\");\n            })\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\n\n    const submit = e => {\n        e.preventDefault();\n        fetch(`${backendUrl}/email/reject`, {method: \"POST\", body: JSON.stringify({comment,requestId}), headers: {\"Content-Type\": \"application/json\"}})\n            .then(response => response.json())\n            .then(r => {\n                console.log(r)\n                setIsSubmitted(true);\n            })\n            .catch(e => console.log(e));\n    }\n\n    let inquiryDetails = {\n        \"Care Home\": careHomeName,\n        Resident: residentName,\n        Medication: medication\n    }\n\n    if (!isSubmitted) {\n        return (\n            <FullPageCentered background={\"#f6d6ad\"} >\n                <h2>Inquiry needed</h2>\n                <List items={inquiryDetails}>\n                    <p>Inquiry comment</p>\n                    <textarea rows={4} onChange={e => setComment(e.target.value)} value={comment} />\n                </List>\n                <Button variant=\"primary\" onClick={e => submit(e)}>\n                    Let the care home know!\n                </Button>\n            </FullPageCentered>\n        );\n    } else {\n        return (\n            <FullPageCentered>\n                <h3>Inquiry submitted to the care home with the comment:</h3>\n                <Quote quote={comment} />\n            </FullPageCentered>\n        )\n    }\n}\n\nexport default EmailInquiry;\n","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/helper/convertTimestampToDate.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/config.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailPage.js",["108","109"],"import React from 'react';\n\nimport TitleBar from \"../shared/TitleBar\";\nimport Form from \"react-bootstrap/Form\";\n\nimport \"./EmailPage.css\";\n\nimport {backendUrl, authHeader} from \"../config\";\nimport EmailPreview from \"./EmailPreview\";\n\nclass EmailPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {emailType:\"all\", emails: []};\n    }\n\n    componentDidMount() {\n        this.getDataFromDb();\n    }\n\n    getDataFromDb() {\n        const options = {\n            withCredentials: true,\n            method: 'GET',\n            headers: {\n                'Authorization': authHeader\n            }\n        }\n        fetch(`http://${backendUrl}/email?careHomeName=abc`, options)\n            .then(response => response.text())\n            .then(response => {\n                console.log(JSON.parse(response))\n                this.setState({emails: JSON.parse(response)})\n            })\n    }\n\n    render() {\n        let {emails, emailType} = this.state;\n        // emails = [\n        //     {residentName: \"Gerald Hornet\", medicationName:\"Paracetamol 20 tablets 25g\", pharmacyName:\"Croyden corner\", dateSent:\"02-12-20 12:34\", dateResponded: null, status:\"unresponded\"},\n        //     {residentName: \"Mary Whippersville\", medicationName:\"IbuProfen 20 tablets 25g\", pharmacyName:\"Croyden corner\", dateSent:\"02-12-20 12:34\", dateResponded: null, status:\"accepted\"},\n        //     {residentName: \"Guy from trainspotting\", medicationName:\"1kg heroin\", pharmacyName:\"Croyden corner\", dateSent:\"02-12-20 12:34\", dateResponded: null, status:\"rejected\"}\n        // ]\n        let emailPreviews = emails.filter(x => emailType == \"all\" || x.status == emailType)\n            .map((email,idx) =>\n            <EmailPreview resident={email.residentName} medication={email.medicationName} pharmacy={email.pharmacyName}\n                          dateSent={email.dateSent} dateResponded={email.dateResponded} status={email.status} key={idx} />\n        );\n\n        return (\n            <main>\n                <TitleBar title={\"Emails Sent\"}>\n                    <Form.Control as={\"select\"} custom onChange={(e) => {\n                        console.log(e)\n                        console.log(e.target.value.toLowerCase())\n                        this.setState({emailType: e.target.value.toLowerCase()})}\n                    } >\n                        <option>All</option>\n                        <option>Accepted</option>\n                        <option>Unresponded</option>\n                        <option>Rejected</option>\n                    </Form.Control>\n                </TitleBar>\n                <div className={\"list\"}>\n                    {emailPreviews}\n                </div>\n            </main>\n        );\n    }\n}\n\nexport default EmailPage;\n",["110","111"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailPreview.js",["112","113","114"],"import React from 'react';\nimport Button from \"react-bootstrap/Button\";\n\nimport \"./EmailPreview.css\";\n\nconst EmailPreview = (props) => {\n    let backgroundColour;\n    if (props.status == \"accepted\") {\n        backgroundColour = \"green\";\n    } else if (props.status == \"unresponded\") {\n        backgroundColour = \"yellow\";\n    } else if (props.status == \"rejected\") {\n        backgroundColour = \"red\";\n    }\n    return (\n        <div className={`email-container`} style={{\"backgroundColor\": backgroundColour}}>\n            <div className={\"email-status\"}>{props.status.charAt(0).toUpperCase() + props.status.slice(1)}</div>\n            <div className={\"email-data\"}>\n                <p>Resident: </p><p>{props.resident}</p>\n                <p>Medication: </p><p>{props.medication}</p>\n                <p>Pharmacy: </p><p>{props.pharmacy}</p>\n                <p>Date requested: </p><p>{props.dateSent}</p>\n                <p>Date responded: </p><p>{props.dateResponded || \"-\"}</p>\n            </div>\n            <Button variant=\"primary\" block size={\"lg\"}>View Email</Button>\n            <Button variant=\"secondary\" block size={\"lg\"}>Resend</Button>\n        </div>\n    );\n}\n\nexport default EmailPreview;\n","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/reportWebVitals.js",[],["115","116"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailConfirmation.js",["117"],"import React, {useEffect, useState} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport FullPageCentered from \"../shared/FullPageCentered\";\nimport List from \"../shared/List\";\nimport {backendUrl} from \"../config\";\nimport {convertToYYYYMMDD} from \"../helper/convertTimestampToDate\";\n\nconst EmailConfirmation = (props) => {\n    const [readyDate, setReadyDate] = useState(\"\");\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [careHomeName, setCareHomeName] = useState(\"-\");\n    const [residentName, setResidentName] = useState(\"-\");\n    const [medication, setMedication] = useState(\"-\");\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\n\n    //method to get the details of the medication from the database once the page loads\n    useEffect(() => {\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\n            .then(r => r.json())\n            .then(resp => {\n                console.log(resp);\n                setCareHomeName(resp.careHomeName || \"-\");\n                setResidentName(resp.residentName || \"-\");\n                setMedication(resp.medicationName || \"-\");\n                if (resp.dateMedicationToBeReady) { //if date is not set don't change default value\n                    setReadyDate(convertToYYYYMMDD(resp.dateMedicationToBeReady));\n                }\n            })\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\n\n\n    const submit = e => {\n        e.preventDefault();\n        console.log({readyDate, requestId});\n        fetch(`${backendUrl}/email/accept`, {method: \"POST\", body: JSON.stringify({readyDate,requestId}), headers: {\"Content-Type\": \"application/json\"}})\n            .then(response => response.json())\n            .then(r => {\n                console.log(r);\n                setIsSubmitted(true);\n            })\n            .catch(e => console.log(e));\n    }\n\n    //getting todays date so we can set the earliest date the medication is ready to today - i.e. the pharmacist cannot pick a past date\n    let now = new Date();\n    let today =  now.getFullYear() + \"-\" + (now.getMonth()+1) + \"-\" + now.getDate();\n\n    let inquiryDetails = {\n        \"Care Home\": careHomeName, Resident: residentName, Medication: medication\n    }\n\n    if (!isSubmitted) {\n        return (\n            <FullPageCentered background={\"#ccf6c8\"} >\n                <h2>Processing Medication</h2>\n                <List items={inquiryDetails}>\n                    <p>Date ready for collection:</p>\n                    <input type={\"date\"} min={today} onChange={e => setReadyDate(e.target.value)} value={readyDate} />\n                </List>\n                <Button variant=\"primary\" onClick={e => submit(e)}>\n                    Let the care home know!\n                </Button>\n            </FullPageCentered>\n        );\n    } else {\n        return (\n            <FullPageCentered>\n                <h3>Confirmation sent to the care home that they can pick up the medication on:</h3>\n                <h3>{readyDate}</h3>\n            </FullPageCentered>\n        )\n    }\n}\n\n\n// <Form>\n//     <h1>Confirming medication order</h1>\n//     <p>The date this medication should be available is:</p>\n//     <Form.Group controlId=\"date\">\n//         <Form.Control type=\"date\" min={today} onChange={e => setReadyDate(e.target.value)} />\n//     </Form.Group>\n//     <Button variant=\"primary\" onClick={e => submit(e)}>\n//         Confirm\n//     </Button>\n// </Form>\n\nexport default EmailConfirmation;\n",["118","119"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/App.js",["120","121","122","123","124","125","126","127","128","129"],"import { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport PharmacyPage from \"./pharmacy/PharmacyPage\";\nimport EmailPreview from \"./email/EmailPreview\";\nimport EmailPage from \"./email/EmailPage\";\nimport EmailConfirmation from \"./email/EmailConfirmation\";\nimport EmailInquiry from \"./email/EmailInquiry\";\n//import MedicationDetailsPage from \"./medication/MedicationDetailsPage\";\nimport ListDetailsComponent from \"./ListDetailsCompoenet\";\nimport Dashboard from \"./Dashboard/Dashboard\";\nimport Login from \"./Login/TodoApp\";\n\nfunction App() {\n  return (\n    <div>\n      <Login />\n      {/*<Dashboard />*/}\n      {/*<ListDetailsComponent />*/}\n      {/* <Router>\n        <Route path=\"/MedicationDetailsPage\" component={ListDetailsComponent} />\n        <Route exact path=\"/\" component={EmailPage} />\n        <Route path=\"/email/confirmation\" component={EmailConfirmation} />\n        <Route path=\"/email/inquiry\" component={EmailInquiry} />\n        <Route path=\"/pharmacy\" component={PharmacyPage} />\n      </Router> */}\n    </div>\n  );\n}\n\nexport default App;\n",["130","131"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/pharmacy/PharmacyPage.js",[],["132","133"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/ListDetailsCompoenet.jsx",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/pharmacy/PharmacyPreview.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/shared/List.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/MedicationsDetails.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Dashboard/Dashboard.jsx",["134","135","136"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Login/LoginComponent.jsx",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Login/LogoutComponent.jsx",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Login/AuthenticatedRoute.jsx",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Login/AuthenticationService.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Login/HeaderComponent.jsx",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Login/WelcomeComponent.jsx",["137"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Login/FooterComponent.jsx",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Login/App.jsx",[],{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":27,"column":8,"nodeType":"144","endLine":27,"endColumn":10,"suggestions":"145"},{"ruleId":"146","severity":1,"message":"147","line":44,"column":58,"nodeType":"148","messageId":"149","endLine":44,"endColumn":60},{"ruleId":"146","severity":1,"message":"147","line":44,"column":79,"nodeType":"148","messageId":"149","endLine":44,"endColumn":81},{"ruleId":"138","replacedBy":"150"},{"ruleId":"140","replacedBy":"151"},{"ruleId":"146","severity":1,"message":"147","line":8,"column":22,"nodeType":"148","messageId":"149","endLine":8,"endColumn":24},{"ruleId":"146","severity":1,"message":"147","line":10,"column":29,"nodeType":"148","messageId":"149","endLine":10,"endColumn":31},{"ruleId":"146","severity":1,"message":"147","line":12,"column":29,"nodeType":"148","messageId":"149","endLine":12,"endColumn":31},{"ruleId":"138","replacedBy":"152"},{"ruleId":"140","replacedBy":"153"},{"ruleId":"142","severity":1,"message":"143","line":29,"column":8,"nodeType":"144","endLine":29,"endColumn":10,"suggestions":"154"},{"ruleId":"138","replacedBy":"155"},{"ruleId":"140","replacedBy":"156"},{"ruleId":"157","severity":1,"message":"158","line":1,"column":27,"nodeType":"159","messageId":"160","endLine":1,"endColumn":33},{"ruleId":"157","severity":1,"message":"161","line":1,"column":35,"nodeType":"159","messageId":"160","endLine":1,"endColumn":40},{"ruleId":"157","severity":1,"message":"162","line":3,"column":8,"nodeType":"159","messageId":"160","endLine":3,"endColumn":12},{"ruleId":"157","severity":1,"message":"163","line":7,"column":8,"nodeType":"159","messageId":"160","endLine":7,"endColumn":20},{"ruleId":"157","severity":1,"message":"164","line":8,"column":8,"nodeType":"159","messageId":"160","endLine":8,"endColumn":20},{"ruleId":"157","severity":1,"message":"165","line":9,"column":8,"nodeType":"159","messageId":"160","endLine":9,"endColumn":17},{"ruleId":"157","severity":1,"message":"166","line":10,"column":8,"nodeType":"159","messageId":"160","endLine":10,"endColumn":25},{"ruleId":"157","severity":1,"message":"167","line":11,"column":8,"nodeType":"159","messageId":"160","endLine":11,"endColumn":20},{"ruleId":"157","severity":1,"message":"168","line":13,"column":8,"nodeType":"159","messageId":"160","endLine":13,"endColumn":28},{"ruleId":"157","severity":1,"message":"169","line":14,"column":8,"nodeType":"159","messageId":"160","endLine":14,"endColumn":17},{"ruleId":"138","replacedBy":"170"},{"ruleId":"140","replacedBy":"171"},{"ruleId":"138","replacedBy":"172"},{"ruleId":"140","replacedBy":"173"},{"ruleId":"157","severity":1,"message":"174","line":1,"column":17,"nodeType":"159","messageId":"160","endLine":1,"endColumn":26},{"ruleId":"157","severity":1,"message":"175","line":3,"column":10,"nodeType":"159","messageId":"160","endLine":3,"endColumn":14},{"ruleId":"157","severity":1,"message":"165","line":4,"column":8,"nodeType":"159","messageId":"160","endLine":4,"endColumn":17},{"ruleId":"157","severity":1,"message":"175","line":2,"column":10,"nodeType":"159","messageId":"160","endLine":2,"endColumn":14},"no-native-reassign",["176"],"no-negated-in-lhs",["177"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'requestId'. Either include it or remove the dependency array.","ArrayExpression",["178"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["176"],["177"],["176"],["177"],["179"],["176"],["177"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'logo' is defined but never used.","'PharmacyPage' is defined but never used.","'EmailPreview' is defined but never used.","'EmailPage' is defined but never used.","'EmailConfirmation' is defined but never used.","'EmailInquiry' is defined but never used.","'ListDetailsComponent' is defined but never used.","'Dashboard' is defined but never used.",["176"],["177"],["176"],["177"],"'Component' is defined but never used.","'Link' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"180","fix":"181"},{"desc":"180","fix":"182"},"Update the dependencies array to be: [requestId]",{"range":"183","text":"184"},{"range":"185","text":"184"},[1226,1228],"[requestId]",[1411,1413]]