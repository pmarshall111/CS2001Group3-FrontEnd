[{"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailPage.js":"1","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailSetDate.js":"2","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailReadyForCollection.js":"3","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailStatusCategories.js":"4","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailInquiry.js":"5","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailPreview.js":"6","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/helper/dateHelper.js":"7","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/ShowEmailContent.js":"8","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/TitleBar.js":"9","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/App.js":"10","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/FullPageCentered.js":"11","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/helper/convertTimestampToDate.js":"12","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/Timeline.js":"13","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/reportWebVitals.js":"14","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/alerts/AlertItem.js":"15","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/config.js":"16","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/Quote.js":"17","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/pharmacy/AddPharmacyForm.js":"18","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/tooltip/MedTooltip.js":"19","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/tooltip/ParentTooltip.js":"20","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/tooltip/ResidentTooltip.js":"21","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/pharmacy/PharmacyPreview.js":"22","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/List.js":"23","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/pharmacy/PharmacyPage.js":"24"},{"size":3750,"mtime":1612248153235,"results":"25","hashOfConfig":"26"},{"size":3274,"mtime":1610895199139,"results":"27","hashOfConfig":"26"},{"size":2212,"mtime":1610895258091,"results":"28","hashOfConfig":"26"},{"size":270,"mtime":1611504991220,"results":"29","hashOfConfig":"26"},{"size":2712,"mtime":1610894327474,"results":"30","hashOfConfig":"26"},{"size":3371,"mtime":1611505286138,"results":"31","hashOfConfig":"26"},{"size":400,"mtime":1612029439688,"results":"32","hashOfConfig":"26"},{"size":637,"mtime":1611502882682,"results":"33","hashOfConfig":"26"},{"size":377,"mtime":1606589657957,"results":"34","hashOfConfig":"26"},{"size":4499,"mtime":1612040830747,"results":"35","hashOfConfig":"26"},{"size":295,"mtime":1610894327478,"results":"36","hashOfConfig":"26"},{"size":293,"mtime":1610894327474,"results":"37","hashOfConfig":"26"},{"size":4992,"mtime":1612053008074,"results":"38","hashOfConfig":"26"},{"size":362,"mtime":1606578955284,"results":"39","hashOfConfig":"26"},{"size":669,"mtime":1610894327474,"results":"40","hashOfConfig":"26"},{"size":50,"mtime":1610894327474,"results":"41","hashOfConfig":"26"},{"size":184,"mtime":1610894327478,"results":"42","hashOfConfig":"26"},{"size":2842,"mtime":1610894327474,"results":"43","hashOfConfig":"26"},{"size":624,"mtime":1612039119427,"results":"44","hashOfConfig":"26"},{"size":1562,"mtime":1612051474208,"results":"45","hashOfConfig":"26"},{"size":1054,"mtime":1612039019574,"results":"46","hashOfConfig":"26"},{"size":664,"mtime":1610894327478,"results":"47","hashOfConfig":"26"},{"size":421,"mtime":1610894327478,"results":"48","hashOfConfig":"26"},{"size":1565,"mtime":1610894327474,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"7v4c1w",{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"55"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailPage.js",["110","111"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailSetDate.js",["112"],"import React, {useEffect, useState} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport FullPageCentered from \"../shared/FullPageCentered\";\nimport List from \"../shared/List\";\nimport {backendUrl} from \"../config\";\nimport {convertToYYYYMMDD} from \"../helper/convertTimestampToDate\";\n\nconst EmailSetDate = (props) => {\n    const [readyDate, setReadyDate] = useState(\"\");\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [careHomeName, setCareHomeName] = useState(\"-\");\n    const [residentName, setResidentName] = useState(\"-\");\n    const [medication, setMedication] = useState(\"-\");\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\n\n    //method to get the details of the medication from the database once the page loads\n    useEffect(() => {\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\n            .then(r => r.json())\n            .then(resp => {\n                console.log(resp);\n                setCareHomeName(resp.careHomeName || \"-\");\n                setResidentName(resp.residentName || \"-\");\n                setMedication(resp.medicationName || \"-\");\n                if (resp.dateMedicationToBeReady) { //if date is not set don't change default value\n                    setReadyDate(convertToYYYYMMDD(resp.dateMedicationToBeReady));\n                }\n            })\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\n\n\n    const submit = e => {\n        e.preventDefault();\n        console.log({readyDate, requestId});\n        fetch(`${backendUrl}/email/accept`, {\n            method: \"POST\",\n            body: JSON.stringify({readyDate, requestId}),\n            headers: {\"Content-Type\": \"application/json\"}\n        })\n            .then(response => response.json())\n            .then(r => {\n                console.log(r);\n                setIsSubmitted(true);\n            })\n            .catch(e => console.log(e));\n    }\n\n    //getting todays date so we can set the earliest date the medication is ready to today - i.e. the pharmacist cannot pick a past date\n    let now = new Date();\n    let today = now.getFullYear() + \"-\" + (now.getMonth() + 1) + \"-\" + now.getDate();\n\n    let inquiryDetails = {\n        \"Care Home\": careHomeName, Resident: residentName, Medication: medication\n    }\n\n    if (!isSubmitted) {\n        return (\n            <FullPageCentered background={\"#ccf6c8\"}>\n                <h2>Processing Medication</h2>\n                <List items={inquiryDetails}>\n                    <p>Date ready for collection:</p>\n                    <input type={\"date\"} min={today} onChange={e => setReadyDate(e.target.value)} value={readyDate}/>\n                </List>\n                <Button variant=\"primary\" onClick={e => submit(e)}>\n                    Let the care home know!\n                </Button>\n            </FullPageCentered>\n        );\n    } else {\n        return (\n            <FullPageCentered>\n                <h3>Confirmation sent to the care home that they can pick up the medication on:</h3>\n                <h3>{readyDate}</h3>\n            </FullPageCentered>\n        )\n    }\n}\n\nexport default EmailSetDate;\n",["113","114"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailReadyForCollection.js",["115","116","117","118","119","120"],"import React, {useEffect, useState} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport {backendUrl} from \"../config\";\nimport FullPageCentered from \"../shared/FullPageCentered\";\nimport List from \"../shared/List\";\nimport Quote from \"../shared/Quote\";\n\nconst EmailReadyForCollection = (props) => {\n    const [comment, setComment] = useState(\"\");\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [careHomeName, setCareHomeName] = useState(\"-\");\n    const [residentName, setResidentName] = useState(\"-\");\n    const [medication, setMedication] = useState(\"-\");\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\n\n    //method to get the details of the medication from the database once the page loads\n    useEffect(() => {\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\n            .then(r => r.json())\n            .then(resp => {\n                console.log(resp);\n                setCareHomeName(resp.careHomeName || \"-\");\n                setResidentName(resp.residentName || \"-\");\n                setMedication(resp.medicationName || \"-\");\n                setComment(resp.pharmacyComment || \"\");\n            })\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\n\n    const submit = e => {\n        if (e) e.preventDefault();\n        fetch(`${backendUrl}/email/ready-for-collection`, {method: \"POST\", body: JSON.stringify({comment,requestId}), headers: {\"Content-Type\": \"application/json\"}})\n            .then(response => response.json())\n            .then(r => {\n                console.log(r)\n                setIsSubmitted(true);\n            })\n            .catch(e => console.log(e));\n    }\n\n    let inquiryDetails = {\n        \"Care Home\": careHomeName,\n        Resident: residentName,\n        Medication: medication\n    }\n\n    //automatically submitting.\n    submit();\n\n    return (\n        <FullPageCentered>\n            <h3>{careHomeName} will be notified that {medication} is ready to collect now!</h3>\n        </FullPageCentered>\n    )\n}\n\nexport default EmailReadyForCollection;\n",["121","122"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailStatusCategories.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailInquiry.js",["123"],"import React, {useEffect, useState} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport {backendUrl} from \"../config\";\nimport FullPageCentered from \"../shared/FullPageCentered\";\nimport List from \"../shared/List\";\nimport Quote from \"../shared/Quote\";\n\nconst EmailInquiry = (props) => {\n    const [comment, setComment] = useState(\"\");\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [careHomeName, setCareHomeName] = useState(\"-\");\n    const [residentName, setResidentName] = useState(\"-\");\n    const [medication, setMedication] = useState(\"-\");\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\n\n    //method to get the details of the medication from the database once the page loads\n    useEffect(() => {\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\n            .then(r => r.json())\n            .then(resp => {\n                console.log(resp);\n                setCareHomeName(resp.careHomeName || \"-\");\n                setResidentName(resp.residentName || \"-\");\n                setMedication(resp.medicationName || \"-\");\n                setComment(resp.pharmacyComment || \"\");\n            })\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\n\n    const submit = e => {\n        e.preventDefault();\n        fetch(`${backendUrl}/email/reject`, {method: \"POST\", body: JSON.stringify({comment,requestId}), headers: {\"Content-Type\": \"application/json\"}})\n            .then(response => response.json())\n            .then(r => {\n                console.log(r)\n                setIsSubmitted(true);\n            })\n            .catch(e => console.log(e));\n    }\n\n    let inquiryDetails = {\n        \"Care Home\": careHomeName,\n        Resident: residentName,\n        Medication: medication\n    }\n\n    if (!isSubmitted) {\n        return (\n            <FullPageCentered background={\"#f6d6ad\"} >\n                <h2>Inquiry needed</h2>\n                <List items={inquiryDetails}>\n                    <p>Inquiry comment</p>\n                    <textarea rows={4} onChange={e => setComment(e.target.value)} value={comment} />\n                </List>\n                <Button variant=\"primary\" onClick={e => submit(e)}>\n                    Let the care home know!\n                </Button>\n            </FullPageCentered>\n        );\n    } else {\n        return (\n            <FullPageCentered>\n                <h3>Inquiry submitted to the care home with the comment:</h3>\n                <Quote quote={comment} />\n            </FullPageCentered>\n        )\n    }\n}\n\nexport default EmailInquiry;\n",["124","125"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailPreview.js",["126"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/helper/dateHelper.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/ShowEmailContent.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/TitleBar.js",[],["127","128"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/App.js",["129","130"],"import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport PharmacyPage from \"./pharmacy/PharmacyPage\";\nimport EmailPage from \"./email/EmailPage\";\nimport EmailSetDate from \"./email/EmailSetDate\";\nimport EmailInquiry from \"./email/EmailInquiry\";\nimport AlertsPage from \"./alerts/AlertsPage\";\nimport {backendUrl} from \"./config\";\nimport EmailReadyForCollection from \"./email/EmailReadyForCollection\";\nimport Timeline from \"./shared/Timeline\";\nimport ParentTooltip from \"./shared/tooltip/ParentTooltip\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            pharmacies:[],\n            careHome:{name: \"abc\", id: 1, email:\"abc@aol.com\"},\n            careHomeWorker:\"Peter\"}\n    }\n\n    componentDidMount() {\n        fetch(`${backendUrl}/pharmacy?careHomeId=${this.state.careHome.id}`)\n            .then(response => response.text())\n            .then(response => {\n                console.log({pharmacies: JSON.parse(response)})\n                this.setState({pharmacies: JSON.parse(response)})\n        })\n    }\n\n    render() {\n        const practiceTimelineData = [\n            {medicationName: \"Paracetamol\", dose: 2, time: new Date(new Date().setHours(9)), resident: \"Jimmy\"},\n            {medicationName: \"Paracetamol\", dose: 2, time: new Date(new Date().setHours(13)), resident: \"Jimmy\"},\n            {medicationName: \"Deep heat\", dose: 1, time: new Date(new Date().setHours(9)), resident: \"Jimmy\"},\n            {medicationName: \"Ibuprofen\", dose: 1, time:new Date(new Date().setHours(9)), resident: \"Tom\"},\n            {medicationName: \"Ibuprofen\", dose: 2, time: new Date(new Date().setHours(20)), resident: \"Tom\"},\n            {medicationName: \"Tylenol\", dose: 2, time: new Date(new Date().setHours(9)), resident: \"Rebecca\"},\n            {medicationName: \"Tylenol\", dose: 2, time: new Date(new Date().setHours(13)), resident: \"Rebecca\" },\n            {medicationName: \"Tylenol\", dose: 2, time: new Date(new Date().setHours(16)), resident: \"Rebecca\" },\n            {medicationName: \"Tylenol\", dose: 2, time: new Date(new Date().setHours(20)), resident: \"Rebecca\"}\n        ]\n\n        // const medicationsAtTime = [\n        //     {medicationName: \"Paracetamol\", dose: 2, time: new Date(new Date().setHours(9)), resident: \"Jimmy\"},\n        //     {medicationName: \"Deep heat\", dose: 1, time: new Date(new Date().setHours(9)), resident: \"Jimmy\"},\n        //     {medicationName: \"Tylenol\", dose: 2, time: new Date(new Date().setHours(9)), resident: \"Rebecca\"},\n        //     {medicationName: \"Ibuprofen\", dose: 1, time:new Date(new Date().setHours(9)), resident: \"Tom\"}\n        // ]\n\n        const medicationsAtTime = [\n            {medicationName: \"Tylenol\", dose: \"15ml\", time: new Date(new Date().setHours(9)), resident: \"Rebecca\"},\n            {medicationName: \"Ibuprofen\", dose: 2, time: new Date(new Date().setHours(9)), resident: \"Rebecca\" },\n            {medicationName: \"Paracetamol\", dose: 2, time: new Date(new Date().setHours(9)), resident: \"Rebecca\" },\n            {medicationName: \"Deep Heat\", dose: 1, time: new Date(new Date().setHours(9)), resident: \"Rebecca\"}\n        ]\n\n        return (\n            <Router>\n                <Route exact path=\"/\" component={EmailPage} />\n                <Route path=\"/email/set-date\" component={EmailSetDate} />\n                <Route path=\"/email/inquiry\" component={EmailInquiry} />\n                <Route path=\"/email/ready-to-collect\" component={EmailReadyForCollection} />\n                <Route path=\"/pharmacy\" render={(props) =>\n                    <PharmacyPage {...props} pharmacies={this.state.pharmacies} careHomeId={this.state.careHome.id} />\n                } />\n                <Route path=\"/alerts\" render={(props) =>\n                    <AlertsPage {...props}\n                                careHomeName={this.state.careHome.name}\n                                careHomeWorker={this.state.careHomeWorker}\n                                careHomeEmail={this.state.careHome.email}\n                                careHomeId={this.state.careHome.id}\n                    />\n                } />\n                <Route path=\"/timeline\" render={(props) =>\n                    <div>\n                        <Timeline dosages={practiceTimelineData} />\n                    </div>\n                } />\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/FullPageCentered.js",[],["131","132"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/helper/convertTimestampToDate.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/Timeline.js",["133","134","135","136","137","138","139"],"import React, {useEffect, useRef, useState} from 'react';\nimport * as d3 from 'd3';\nimport {roundDateToNearestMins} from \"../helper/dateHelper\";\nimport ParentTooltip from \"./tooltip/ParentTooltip\";\n\nimport ReactDOM from 'react-dom';\n\n\nconst Timeline = (props) => {\n    const {dosages} = props;\n    const width = 1000;\n    const height = 200;\n    const roundToNearestMins = 15;\n\n    let time = new Date().getTime(); //not using state here as D3 won't view updated state...?\n    const [medsForTime, setMedsForTime] = useState([]);\n    const [isHovered, setIsHovered] = useState(false);\n    const [timeoutIds, setTimeoutIds] = useState([]);\n    const [lastTimeoutId, setLastTimeoutId] = useState(0);\n    const [targetX, setTargetX] = useState(-200);\n    const [targetY, setTargetY] = useState(-200);\n\n    const ref = useRef();\n\n    let tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate()+1);\n    let xScale = d3.scaleTime()\n        .domain([new Date(new Date().toDateString()), new Date(tomorrow.toDateString())])\n        .range([0, width-20]);\n\n    useEffect(() => {\n        //setup initial svg & x axis\n        const svg = d3.select(ref.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .style(\"border\", \"1px solid black\");\n\n        svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + (height/2) + \")\")\n            .call(d3.axisBottom(xScale));\n    }, []);\n\n    useEffect(() => {\n        draw();\n    }, dosages)\n\n    const draw = () => {\n        //first step should be we need to massage the data into a form we can use for our timeline.\n        //would like to have things grouped by hour. so go through the data and group it into objects by time.\n        const timedObjects = {};\n        console.log(dosages);\n        dosages.forEach(dosage => {\n            const {time} = dosage;\n            dosage.roundedTime = roundDateToNearestMins(time, roundToNearestMins);\n            if (!timedObjects[dosage.roundedTime]) {\n                timedObjects[dosage.roundedTime] = [dosage];\n            } else {\n                timedObjects[dosage.roundedTime].push(dosage);\n            }\n        });\n\n        console.log(timedObjects);\n        const data = Object.values(timedObjects);\n\n        const svg = d3.select(ref.current);\n\n        const rectWidth = getRectWidth(xScale, roundToNearestMins);\n        const rectHeight = height/4;\n\n        console.log(data)\n        console.log({time: data[0][0].roundedTime, x: xScale(data[0][0].roundedTime)})\n        console.log(new Date(new Date().toDateString()))\n\n        let selection = svg.selectAll(\"rect\")\n            .data(data)\n            .enter().append(\"rect\")\n            .attr(\"x\", d => xScale(d[0].roundedTime) - rectWidth/2)\n            .attr(\"width\", rectWidth)\n            .attr(\"y\", height/2 - rectHeight/2)\n            .attr(\"height\", rectHeight)\n            .on(\"mouseenter\", (event,data) => {\n                const rectPosition = event.target.getBoundingClientRect();\n                setTargetX(rectPosition.x + rectPosition.width/2);\n                setTargetY(rectPosition.bottom);\n                let {roundedTime} = data[0]\n                clearAllTimeouts();\n                if (roundedTime.getTime() !== time) {\n                    time = roundedTime.getTime()\n                    setMedsForTime(dosages.filter(dose => dose.roundedTime.getTime() === roundedTime.getTime()));\n                    setIsHovered(true);\n                }\n            })\n            .on(\"mouseout\", () => {\n                clearAllTimeouts();\n                setLastTimeoutId(setTimeout(() => setIsHovered(false), 1000));\n                time = 0;\n            });\n    }\n\n    const clearAllTimeouts = () => {\n        //ensuring all timeouts are deleted. as react is asynchronous trying to capture Ids in an array was causing bugs.\n        for (let i = 0; i<10 ; i++) {\n            clearTimeout(lastTimeoutId-i);\n        }\n        for (let i = 0; i<50 ; i++) {\n            clearTimeout(lastTimeoutId+i);\n        }\n    }\n\n    return (\n        <div>\n            <svg ref={ref}/>\n            <div>{isHovered ? 1 : 0}</div>\n            <ParentTooltip medicationsAtTime={medsForTime} isHovered={isHovered}\n                           keepHovered={() => {\n                                clearAllTimeouts();\n                                setIsHovered(true);\n                            }}\n                           startHideTimer={() => {\n                                clearAllTimeouts();\n                               setLastTimeoutId(setTimeout(() => setIsHovered(false), 1000));\n                           }}\n                           xPos={targetX}\n                           yPos={targetY}\n            />\n        </div>\n    );\n}\n\nconst getRectWidth = (xScale, minsRoundedTo) => {\n    let posXMinsInFuture = xScale(new Date(new Date().setMinutes(new Date().getMinutes()+minsRoundedTo)));\n    let posNow = xScale(new Date());\n    return posXMinsInFuture - posNow;\n}\n\nexport default Timeline;","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/reportWebVitals.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/alerts/AlertItem.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/config.js",[],["140","141"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/Quote.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/pharmacy/AddPharmacyForm.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/tooltip/MedTooltip.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/tooltip/ParentTooltip.js",["142","143"],"import React, {useEffect, useState} from 'react';\nimport MedTooltip from \"./MedTooltip\";\nimport ResidentTooltip from \"./ResidentTooltip\";\n\nimport \"./ParentTooltip.css\";\n\nconst ParentTooltip = (props) => {\n    const {medicationsAtTime, isHovered, keepHovered, startHideTimer, xPos, yPos} = props;\n\n    //need to get a list of the residents.\n    let residentMeds = {};\n    medicationsAtTime.forEach(med => {\n        const {resident} = med;\n        if (!residentMeds[resident]) {\n            residentMeds[resident] = [med];\n        } else {\n            residentMeds[resident].push(med);\n        }\n    });\n\n\n    //if we have just 1 resident, we need to render a list of the medications.\n    //else render a list of the residents where you can view each of their medications.\n    const numbResidents = Object.keys(residentMeds).length;\n    let content;\n    if (numbResidents === 1) {\n        content = <MedTooltip medications={residentMeds[Object.keys(residentMeds)[0]]} />\n    } else if (numbResidents !== 0) {\n        content = <ResidentTooltip residentDict={residentMeds} />\n    }\n\n    return (\n        <div id={\"tooltip\"} style={{\"opacity\": isHovered ? 1 : 0, \"top\": isHovered ? yPos+\"px\" : \"-50px\", \"left\": isHovered ? xPos+\"px\" : \"0px\" }}\n             onMouseOver={() => {\n                 console.log(\"over\")\n                 keepHovered();\n             }}\n             onMouseLeave={() => {\n                 console.log(\"leave\");\n                 startHideTimer();\n             }}>\n            {content}\n        </div>\n    );\n};\n\nexport default ParentTooltip;","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/tooltip/ResidentTooltip.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/pharmacy/PharmacyPreview.js",["144"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/List.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/pharmacy/PharmacyPage.js",["145","146"],{"ruleId":"147","severity":1,"message":"148","line":54,"column":58,"nodeType":"149","messageId":"150","endLine":54,"endColumn":60},{"ruleId":"147","severity":1,"message":"148","line":54,"column":79,"nodeType":"149","messageId":"150","endLine":54,"endColumn":81},{"ruleId":"151","severity":1,"message":"152","line":29,"column":8,"nodeType":"153","endLine":29,"endColumn":10,"suggestions":"154"},{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","severity":1,"message":"160","line":2,"column":8,"nodeType":"161","messageId":"162","endLine":2,"endColumn":14},{"ruleId":"159","severity":1,"message":"163","line":5,"column":8,"nodeType":"161","messageId":"162","endLine":5,"endColumn":12},{"ruleId":"159","severity":1,"message":"164","line":6,"column":8,"nodeType":"161","messageId":"162","endLine":6,"endColumn":13},{"ruleId":"159","severity":1,"message":"165","line":10,"column":12,"nodeType":"161","messageId":"162","endLine":10,"endColumn":23},{"ruleId":"151","severity":1,"message":"152","line":27,"column":8,"nodeType":"153","endLine":27,"endColumn":10,"suggestions":"166"},{"ruleId":"159","severity":1,"message":"167","line":40,"column":9,"nodeType":"161","messageId":"162","endLine":40,"endColumn":23},{"ruleId":"155","replacedBy":"168"},{"ruleId":"157","replacedBy":"169"},{"ruleId":"151","severity":1,"message":"152","line":27,"column":8,"nodeType":"153","endLine":27,"endColumn":10,"suggestions":"170"},{"ruleId":"155","replacedBy":"171"},{"ruleId":"157","replacedBy":"172"},{"ruleId":"159","severity":1,"message":"173","line":1,"column":16,"nodeType":"161","messageId":"162","endLine":1,"endColumn":24},{"ruleId":"155","replacedBy":"174"},{"ruleId":"157","replacedBy":"175"},{"ruleId":"159","severity":1,"message":"176","line":15,"column":8,"nodeType":"161","messageId":"162","endLine":15,"endColumn":21},{"ruleId":"159","severity":1,"message":"177","line":55,"column":15,"nodeType":"161","messageId":"162","endLine":55,"endColumn":32},{"ruleId":"155","replacedBy":"178"},{"ruleId":"157","replacedBy":"179"},{"ruleId":"159","severity":1,"message":"180","line":6,"column":8,"nodeType":"161","messageId":"162","endLine":6,"endColumn":16},{"ruleId":"159","severity":1,"message":"181","line":18,"column":12,"nodeType":"161","messageId":"162","endLine":18,"endColumn":22},{"ruleId":"159","severity":1,"message":"182","line":18,"column":24,"nodeType":"161","messageId":"162","endLine":18,"endColumn":37},{"ruleId":"151","severity":1,"message":"183","line":41,"column":8,"nodeType":"153","endLine":41,"endColumn":10,"suggestions":"184"},{"ruleId":"151","severity":1,"message":"185","line":45,"column":8,"nodeType":"161","endLine":45,"endColumn":15},{"ruleId":"151","severity":1,"message":"186","line":45,"column":8,"nodeType":"161","endLine":45,"endColumn":15,"suggestions":"187"},{"ruleId":"159","severity":1,"message":"188","line":74,"column":13,"nodeType":"161","messageId":"162","endLine":74,"endColumn":22},{"ruleId":"155","replacedBy":"189"},{"ruleId":"157","replacedBy":"190"},{"ruleId":"159","severity":1,"message":"191","line":1,"column":16,"nodeType":"161","messageId":"162","endLine":1,"endColumn":25},{"ruleId":"159","severity":1,"message":"173","line":1,"column":27,"nodeType":"161","messageId":"162","endLine":1,"endColumn":35},{"ruleId":"159","severity":1,"message":"160","line":2,"column":8,"nodeType":"161","messageId":"162","endLine":2,"endColumn":14},{"ruleId":"159","severity":1,"message":"192","line":9,"column":9,"nodeType":"161","messageId":"162","endLine":9,"endColumn":19},{"ruleId":"159","severity":1,"message":"193","line":18,"column":26,"nodeType":"161","messageId":"162","endLine":18,"endColumn":36},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'requestId'. Either include it or remove the dependency array.","ArrayExpression",["194"],"no-native-reassign",["195"],"no-negated-in-lhs",["196"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'List' is defined but never used.","'Quote' is defined but never used.","'isSubmitted' is assigned a value but never used.",["197"],"'inquiryDetails' is assigned a value but never used.",["195"],["196"],["198"],["195"],["196"],"'useState' is defined but never used.",["195"],["196"],"'ParentTooltip' is defined but never used.","'medicationsAtTime' is assigned a value but never used.",["195"],["196"],"'ReactDOM' is defined but never used.","'timeoutIds' is assigned a value but never used.","'setTimeoutIds' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'xScale'. Either include it or remove the dependency array.",["199"],"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook useEffect has a missing dependency: 'draw'. Either include it or remove the dependency array.",["200"],"'selection' is assigned a value but never used.",["195"],["196"],"'useEffect' is defined but never used.","'backendUrl' is defined but never used.","'careHomeId' is assigned a value but never used.",{"desc":"201","fix":"202"},"no-global-assign","no-unsafe-negation",{"desc":"201","fix":"203"},{"desc":"201","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},"Update the dependencies array to be: [requestId]",{"range":"209","text":"210"},{"range":"211","text":"210"},{"range":"212","text":"210"},"Update the dependencies array to be: [xScale]",{"range":"213","text":"214"},"Update the dependencies array to be: [draw]",{"range":"215","text":"216"},[1406,1408],"[requestId]",[1237,1239],[1226,1228],[1415,1417],"[xScale]",[1466,1473],"[draw]"]