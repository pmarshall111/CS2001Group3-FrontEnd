[{"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\index.js":"1","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\App.js":"2","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\reportWebVitals.js":"3","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\pharmacy\\PharmacyPage.js":"4","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\pharmacy\\PharmacyPreview.js":"5","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\pharmacy\\AddPharmacyForm.js":"6","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\shared\\TitleBar.js":"7","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\config.js":"8","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\profile\\ResidentsList.js":"9","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\profile\\AddResidentForm.js":"10","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\profile\\ResidentPreview.js":"11","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\profile\\ArchResProf.js":"12","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\profile\\Residentprofile.js":"13","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\profile\\EditResidentForm.js":"14","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\email\\EmailPage.js":"15","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\email\\EmailSetDate.js":"16","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\email\\EmailReadyForCollection.js":"17","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\email\\EmailInquiry.js":"18","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\alerts\\AlertsPage.js":"19","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\shared\\Timeline.js":"20","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\shared\\tooltip\\ParentTooltip.js":"21","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\medication\\MedicationForm.js":"22","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\email\\EmailStatusCategories.js":"23","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\email\\ShowEmailContent.js":"24","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\email\\EmailPreview.js":"25","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\shared\\FullPageCentered.js":"26","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\alerts\\AlertItem.js":"27","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\shared\\List.js":"28","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\shared\\Quote.js":"29","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\shared\\tooltip\\MedTooltip.js":"30","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\medication\\MedicationDose.js":"31","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\shared\\tooltip\\ResidentTooltip.js":"32","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\helper\\dateHelper.js":"33","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\helper\\convertTimestampToDate.js":"34"},{"size":517,"mtime":1611494007105,"results":"35","hashOfConfig":"36"},{"size":5998,"mtime":1613412102532,"results":"37","hashOfConfig":"36"},{"size":375,"mtime":1611494007107,"results":"38","hashOfConfig":"39"},{"size":1609,"mtime":1613411136494,"results":"40","hashOfConfig":"39"},{"size":682,"mtime":1613411136495,"results":"41","hashOfConfig":"36"},{"size":2904,"mtime":1613411136494,"results":"42","hashOfConfig":"36"},{"size":393,"mtime":1611494736295,"results":"43","hashOfConfig":"36"},{"size":50,"mtime":1611497586196,"results":"44","hashOfConfig":"39"},{"size":2754,"mtime":1613411125194,"results":"45","hashOfConfig":"39"},{"size":3370,"mtime":1613411125190,"results":"46","hashOfConfig":"39"},{"size":2409,"mtime":1613411125192,"results":"47","hashOfConfig":"39"},{"size":1461,"mtime":1613411125190,"results":"48","hashOfConfig":"39"},{"size":2590,"mtime":1613411125193,"results":"49","hashOfConfig":"39"},{"size":3497,"mtime":1613411125191,"results":"50","hashOfConfig":"39"},{"size":4061,"mtime":1613411764801,"results":"51","hashOfConfig":"36"},{"size":3353,"mtime":1613411136491,"results":"52","hashOfConfig":"39"},{"size":2268,"mtime":1613411136490,"results":"53","hashOfConfig":"39"},{"size":2781,"mtime":1613411136486,"results":"54","hashOfConfig":"39"},{"size":4563,"mtime":1613411136485,"results":"55","hashOfConfig":"39"},{"size":5090,"mtime":1613411136497,"results":"56","hashOfConfig":"39"},{"size":1478,"mtime":1613411136498,"results":"57","hashOfConfig":"39"},{"size":4819,"mtime":1613411136494,"results":"58","hashOfConfig":"39"},{"size":275,"mtime":1613411136491,"results":"59","hashOfConfig":"39"},{"size":657,"mtime":1613411136492,"results":"60","hashOfConfig":"39"},{"size":3449,"mtime":1613411136487,"results":"61","hashOfConfig":"39"},{"size":308,"mtime":1613411136495,"results":"62","hashOfConfig":"36"},{"size":691,"mtime":1613411136484,"results":"63","hashOfConfig":"39"},{"size":441,"mtime":1613411136496,"results":"64","hashOfConfig":"36"},{"size":195,"mtime":1613411136496,"results":"65","hashOfConfig":"39"},{"size":649,"mtime":1613411136497,"results":"66","hashOfConfig":"36"},{"size":2544,"mtime":1613411136493,"results":"67","hashOfConfig":"36"},{"size":1085,"mtime":1613411136499,"results":"68","hashOfConfig":"39"},{"size":410,"mtime":1613411136493,"results":"69","hashOfConfig":"39"},{"size":299,"mtime":1613411136492,"results":"70","hashOfConfig":"39"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gh87a9",{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},"1uit9z4",{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"77"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"77"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"77"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"77"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"77"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"77"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"77"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"77"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\index.js",[],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\App.js",["148","149","150"],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\reportWebVitals.js",[],["151","152"],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\pharmacy\\PharmacyPage.js",["153","154"],"import React from 'react';\r\n\r\nimport PharmacyPreview from \"./PharmacyPreview\";\r\nimport TitleBar from \"../shared/TitleBar\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport \"./PharmacyPage.css\";\r\nimport AddPharmacyForm from \"./AddPharmacyForm\";\r\nimport {backendUrl} from \"../config\";\r\n\r\nclass PharmacyPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {showForm: false};\r\n    }\r\n\r\n    render() {\r\n        let {pharmacies, careHomeId} = this.props;\r\n        let {showForm} = this.state;\r\n        let pharmacyPreviews = pharmacies.map((pharmacy,idx) =>\r\n            <PharmacyPreview title={pharmacy.name} isDefault={pharmacy.default}\r\n                             hasPhone={pharmacy.phoneNumb} hasEmail={pharmacy.email}\r\n                             hasAddress={pharmacy.address && pharmacy.address.length>0} key={idx} /> );\r\n\r\n        return (\r\n            <main>\r\n                <TitleBar title={\"My Pharmacies\"}>\r\n                    <Button variant=\"primary\" onClick={() => this.setState({showForm: true})}>Add new</Button>\r\n                </TitleBar>\r\n                <div className={\"list\"}>\r\n                    {pharmacyPreviews}\r\n                </div>\r\n                {showForm && <AddPharmacyForm\r\n                    show={showForm}\r\n                    handleClose={() => this.setState({showForm: false})}\r\n                    handleSubmission={() => this.setState({showForm: false})}\r\n                    careHomeId={this.props.careHomeId}\r\n                />}\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PharmacyPage;\r\n","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\pharmacy\\PharmacyPreview.js",["155"],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\pharmacy\\AddPharmacyForm.js",[],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\shared\\TitleBar.js",[],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\config.js",[],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\profile\\ResidentsList.js",[],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\profile\\AddResidentForm.js",[],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\profile\\ResidentPreview.js",[],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\profile\\ArchResProf.js",[],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\profile\\Residentprofile.js",[],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\profile\\EditResidentForm.js",[],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\email\\EmailPage.js",["156","157"],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\email\\EmailSetDate.js",["158"],"import React, {useEffect, useState} from 'react';\r\nimport Button from \"react-bootstrap/Button\";\r\nimport FullPageCentered from \"../shared/FullPageCentered\";\r\nimport List from \"../shared/List\";\r\nimport {backendUrl} from \"../config\";\r\nimport {convertToYYYYMMDD} from \"../helper/convertTimestampToDate\";\r\n\r\nconst EmailSetDate = (props) => {\r\n    const [readyDate, setReadyDate] = useState(\"\");\r\n    const [isSubmitted, setIsSubmitted] = useState(false);\r\n    const [careHomeName, setCareHomeName] = useState(\"-\");\r\n    const [residentName, setResidentName] = useState(\"-\");\r\n    const [medication, setMedication] = useState(\"-\");\r\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\r\n\r\n    //method to get the details of the medication from the database once the page loads\r\n    useEffect(() => {\r\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\r\n            .then(r => r.json())\r\n            .then(resp => {\r\n                console.log(resp);\r\n                setCareHomeName(resp.careHomeName || \"-\");\r\n                setResidentName(resp.residentName || \"-\");\r\n                setMedication(resp.medicationName || \"-\");\r\n                if (resp.dateMedicationToBeReady) { //if date is not set don't change default value\r\n                    setReadyDate(convertToYYYYMMDD(resp.dateMedicationToBeReady));\r\n                }\r\n            })\r\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\r\n\r\n\r\n    const submit = e => {\r\n        e.preventDefault();\r\n        console.log({readyDate, requestId});\r\n        fetch(`${backendUrl}/email/accept`, {\r\n            method: \"POST\",\r\n            body: JSON.stringify({readyDate, requestId}),\r\n            headers: {\"Content-Type\": \"application/json\"}\r\n        })\r\n            .then(response => response.json())\r\n            .then(r => {\r\n                console.log(r);\r\n                setIsSubmitted(true);\r\n            })\r\n            .catch(e => console.log(e));\r\n    }\r\n\r\n    //getting todays date so we can set the earliest date the medication is ready to today - i.e. the pharmacist cannot pick a past date\r\n    let now = new Date();\r\n    let today = now.getFullYear() + \"-\" + (now.getMonth() + 1) + \"-\" + now.getDate();\r\n\r\n    let inquiryDetails = {\r\n        \"Care Home\": careHomeName, Resident: residentName, Medication: medication\r\n    }\r\n\r\n    if (!isSubmitted) {\r\n        return (\r\n            <FullPageCentered background={\"#ccf6c8\"}>\r\n                <h2>Processing Medication</h2>\r\n                <List items={inquiryDetails}>\r\n                    <p>Date ready for collection:</p>\r\n                    <input type={\"date\"} min={today} onChange={e => setReadyDate(e.target.value)} value={readyDate}/>\r\n                </List>\r\n                <Button variant=\"primary\" onClick={e => submit(e)}>\r\n                    Let the care home know!\r\n                </Button>\r\n            </FullPageCentered>\r\n        );\r\n    } else {\r\n        return (\r\n            <FullPageCentered>\r\n                <h3>Confirmation sent to the care home that they can pick up the medication on:</h3>\r\n                <h3>{readyDate}</h3>\r\n            </FullPageCentered>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EmailSetDate;\r\n","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\email\\EmailReadyForCollection.js",["159","160","161","162","163","164"],"import React, {useEffect, useState} from 'react';\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {backendUrl} from \"../config\";\r\nimport FullPageCentered from \"../shared/FullPageCentered\";\r\nimport List from \"../shared/List\";\r\nimport Quote from \"../shared/Quote\";\r\n\r\nconst EmailReadyForCollection = (props) => {\r\n    const [comment, setComment] = useState(\"\");\r\n    const [isSubmitted, setIsSubmitted] = useState(false);\r\n    const [careHomeName, setCareHomeName] = useState(\"-\");\r\n    const [residentName, setResidentName] = useState(\"-\");\r\n    const [medication, setMedication] = useState(\"-\");\r\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\r\n\r\n    //method to get the details of the medication from the database once the page loads\r\n    useEffect(() => {\r\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\r\n            .then(r => r.json())\r\n            .then(resp => {\r\n                console.log(resp);\r\n                setCareHomeName(resp.careHomeName || \"-\");\r\n                setResidentName(resp.residentName || \"-\");\r\n                setMedication(resp.medicationName || \"-\");\r\n                setComment(resp.pharmacyComment || \"\");\r\n            })\r\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\r\n\r\n    const submit = e => {\r\n        if (e) e.preventDefault();\r\n        fetch(`${backendUrl}/email/ready-for-collection`, {method: \"POST\", body: JSON.stringify({comment,requestId}), headers: {\"Content-Type\": \"application/json\"}})\r\n            .then(response => response.json())\r\n            .then(r => {\r\n                console.log(r)\r\n                setIsSubmitted(true);\r\n            })\r\n            .catch(e => console.log(e));\r\n    }\r\n\r\n    let inquiryDetails = {\r\n        \"Care Home\": careHomeName,\r\n        Resident: residentName,\r\n        Medication: medication\r\n    }\r\n\r\n    //automatically submitting.\r\n    submit();\r\n\r\n    return (\r\n        <FullPageCentered>\r\n            <h3>{careHomeName} will be notified that {medication} is ready to collect now!</h3>\r\n        </FullPageCentered>\r\n    )\r\n}\r\n\r\nexport default EmailReadyForCollection;\r\n","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\email\\EmailInquiry.js",["165"],"import React, {useEffect, useState} from 'react';\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {backendUrl} from \"../config\";\r\nimport FullPageCentered from \"../shared/FullPageCentered\";\r\nimport List from \"../shared/List\";\r\nimport Quote from \"../shared/Quote\";\r\n\r\nconst EmailInquiry = (props) => {\r\n    const [comment, setComment] = useState(\"\");\r\n    const [isSubmitted, setIsSubmitted] = useState(false);\r\n    const [careHomeName, setCareHomeName] = useState(\"-\");\r\n    const [residentName, setResidentName] = useState(\"-\");\r\n    const [medication, setMedication] = useState(\"-\");\r\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\r\n\r\n    //method to get the details of the medication from the database once the page loads\r\n    useEffect(() => {\r\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\r\n            .then(r => r.json())\r\n            .then(resp => {\r\n                console.log(resp);\r\n                setCareHomeName(resp.careHomeName || \"-\");\r\n                setResidentName(resp.residentName || \"-\");\r\n                setMedication(resp.medicationName || \"-\");\r\n                setComment(resp.pharmacyComment || \"\");\r\n            })\r\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\r\n\r\n    const submit = e => {\r\n        e.preventDefault();\r\n        fetch(`${backendUrl}/email/reject`, {method: \"POST\", body: JSON.stringify({comment,requestId}), headers: {\"Content-Type\": \"application/json\"}})\r\n            .then(response => response.json())\r\n            .then(r => {\r\n                console.log(r)\r\n                setIsSubmitted(true);\r\n            })\r\n            .catch(e => console.log(e));\r\n    }\r\n\r\n    let inquiryDetails = {\r\n        \"Care Home\": careHomeName,\r\n        Resident: residentName,\r\n        Medication: medication\r\n    }\r\n\r\n    if (!isSubmitted) {\r\n        return (\r\n            <FullPageCentered background={\"#f6d6ad\"} >\r\n                <h2>Inquiry needed</h2>\r\n                <List items={inquiryDetails}>\r\n                    <p>Inquiry comment</p>\r\n                    <textarea rows={4} onChange={e => setComment(e.target.value)} value={comment} />\r\n                </List>\r\n                <Button variant=\"primary\" onClick={e => submit(e)}>\r\n                    Let the care home know!\r\n                </Button>\r\n            </FullPageCentered>\r\n        );\r\n    } else {\r\n        return (\r\n            <FullPageCentered>\r\n                <h3>Inquiry submitted to the care home with the comment:</h3>\r\n                <Quote quote={comment} />\r\n            </FullPageCentered>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EmailInquiry;\r\n","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\alerts\\AlertsPage.js",[],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\shared\\Timeline.js",["166","167","168","169","170","171"],"import React, {useEffect, useRef, useState} from 'react';\r\nimport * as d3 from 'd3';\r\nimport {roundDateToNearestMins} from \"../helper/dateHelper\";\r\nimport ParentTooltip from \"./tooltip/ParentTooltip\";\r\n\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nconst Timeline = (props) => {\r\n    const {dosages} = props;\r\n    const width = 1000;\r\n    const height = 200;\r\n    const roundToNearestMins = 60;\r\n    const msBeforePopoverVanish = 250;\r\n\r\n    console.log(dosages)\r\n\r\n    let time = new Date().getTime(); //not using state here as D3 won't view updated state...?\r\n    const [medsForTime, setMedsForTime] = useState([]);\r\n    const [isHovered, setIsHovered] = useState(false);\r\n    const [timeoutIds, setTimeoutIds] = useState([]);\r\n    const [lastTimeoutId, setLastTimeoutId] = useState(0);\r\n    const [targetX, setTargetX] = useState(-200);\r\n    const [targetY, setTargetY] = useState(-200);\r\n\r\n    const ref = useRef();\r\n\r\n    let tomorrow = new Date();\r\n    tomorrow.setDate(tomorrow.getDate()+1);\r\n    let xScale = d3.scaleTime()\r\n        .domain([new Date(new Date().toDateString()), new Date(tomorrow.toDateString())])\r\n        .range([0, width-20]);\r\n\r\n    useEffect(() => {\r\n        //setup initial svg & x axis\r\n        const svg = d3.select(ref.current)\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height)\r\n            .style(\"border\", \"1px solid black\");\r\n\r\n        svg.append(\"g\")\r\n            .attr(\"transform\", \"translate(0,\" + (height/2) + \")\")\r\n            .call(d3.axisBottom(xScale));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        draw();\r\n    }, [dosages])\r\n\r\n    const draw = () => {\r\n        console.log(\"DRAWING\")\r\n        //first step should be we need to massage the data into a form we can use for our timeline.\r\n        //would like to have things grouped by hour. so go through the data and group it into objects by time.\r\n        const timedObjects = {};\r\n        console.log(dosages);\r\n        dosages.forEach(dosage => {\r\n            const {time} = dosage;\r\n            dosage.roundedTime = roundDateToNearestMins(time, roundToNearestMins);\r\n            if (!timedObjects[dosage.roundedTime]) {\r\n                timedObjects[dosage.roundedTime] = [dosage];\r\n            } else {\r\n                timedObjects[dosage.roundedTime].push(dosage);\r\n            }\r\n        });\r\n\r\n        console.log(timedObjects);\r\n        const data = Object.values(timedObjects);\r\n\r\n        const svg = d3.select(ref.current);\r\n\r\n        const rectWidth = getRectWidth(xScale, roundToNearestMins);\r\n        const rectHeight = height/4;\r\n\r\n\r\n        let selection = svg.selectAll(\"rect\")\r\n            .data(data)\r\n            .enter().append(\"rect\")\r\n            .attr(\"x\", d => xScale(d[0].roundedTime) - rectWidth/2)\r\n            .attr(\"width\", rectWidth)\r\n            .attr(\"y\", height/2 - rectHeight/2)\r\n            .attr(\"height\", rectHeight)\r\n            .on(\"mouseenter\", (event,data) => {\r\n                const rectPosition = event.target.getBoundingClientRect();\r\n                setTargetX(rectPosition.x + rectPosition.width/2);\r\n                setTargetY(rectPosition.bottom);\r\n                let {roundedTime} = data[0]\r\n                clearAllTimeouts();\r\n                if (roundedTime.getTime() !== time) {\r\n                    time = roundedTime.getTime()\r\n                    setMedsForTime(dosages.filter(dose => dose.roundedTime.getTime() === roundedTime.getTime()));\r\n                    setIsHovered(true);\r\n                }\r\n            })\r\n            .on(\"mouseout\", () => {\r\n                clearAllTimeouts();\r\n                setLastTimeoutId(setTimeout(() => setIsHovered(false), msBeforePopoverVanish));\r\n                time = 0;\r\n            });\r\n    }\r\n\r\n    const clearAllTimeouts = () => {\r\n        //ensuring all timeouts are deleted. as react is asynchronous trying to capture Ids in an array was causing bugs.\r\n        for (let i = 0; i<10 ; i++) {\r\n            clearTimeout(lastTimeoutId-i);\r\n        }\r\n        for (let i = 0; i<50 ; i++) {\r\n            clearTimeout(lastTimeoutId+i);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <svg ref={ref}/>\r\n            <div>{isHovered ? 1 : 0}</div>\r\n            <ParentTooltip medicationsAtTime={medsForTime} isHovered={isHovered}\r\n                           keepHovered={() => {\r\n                                clearAllTimeouts();\r\n                                setIsHovered(true);\r\n                            }}\r\n                           startHideTimer={() => {\r\n                                clearAllTimeouts();\r\n                               setLastTimeoutId(setTimeout(() => setIsHovered(false), msBeforePopoverVanish));\r\n                           }}\r\n                           xPos={targetX}\r\n                           yPos={targetY}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst getRectWidth = (xScale, minsRoundedTo) => {\r\n    let posXMinsInFuture = xScale(new Date(new Date().setMinutes(new Date().getMinutes()+minsRoundedTo)));\r\n    let posNow = xScale(new Date());\r\n    return posXMinsInFuture - posNow;\r\n}\r\n\r\nexport default Timeline;","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\shared\\tooltip\\ParentTooltip.js",["172","173","174"],"import React, {useEffect, useState} from 'react';\r\nimport MedTooltip from \"./MedTooltip\";\r\nimport ResidentTooltip from \"./ResidentTooltip\";\r\n\r\nimport \"./ParentTooltip.css\";\r\n\r\nconst ParentTooltip = (props) => {\r\n    const {medicationsAtTime, isHovered, keepHovered, startHideTimer, xPos, yPos} = props;\r\n\r\n    //need to get a list of the residents.\r\n    let residentMeds = {};\r\n    medicationsAtTime.forEach(med => {\r\n        const {resident} = med;\r\n        if (!residentMeds[resident]) {\r\n            residentMeds[resident] = [med];\r\n        } else {\r\n            residentMeds[resident].push(med);\r\n        }\r\n    });\r\n\r\n\r\n    //if we have just 1 resident, we need to render a list of the medications.\r\n    //else render a list of the residents where you can view each of their medications.\r\n    const numbResidents = Object.keys(residentMeds).length;\r\n    let content;\r\n    if (numbResidents !== 0) {\r\n        content = <ResidentTooltip residentDict={residentMeds} />\r\n    }\r\n\r\n    return (\r\n        <div id={\"tooltip\"} style={{\"opacity\": isHovered ? 1 : 0, \"top\": isHovered ? yPos+\"px\" : \"-50px\", \"left\": isHovered ? xPos+\"px\" : \"0px\" }}\r\n             onMouseOver={() => {\r\n                 console.log(\"over\")\r\n                 keepHovered();\r\n             }}\r\n             onMouseLeave={() => {\r\n                 console.log(\"leave\");\r\n                 startHideTimer();\r\n             }}>\r\n            {content}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ParentTooltip;","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\medication\\MedicationForm.js",["175"],"import React, {useEffect, useState} from 'react';\r\nimport {FormControl, FormLabel, Tab, Tabs} from \"react-bootstrap\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport MedicationDose from \"./MedicationDose\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {backendUrl} from \"../config\";\r\n\r\nconst MedicationForm = (props) => {\r\n    const {resId, pharmacies} = props;\r\n\r\n    let [doseTimes, setDoseTimes] = useState([{time: new Date(), repeats:\"Every day\", dose: \"25mg\"}])\r\n    const [medName, setMedName] = useState(\"\");\r\n    const [medDesc, setMedDesc] = useState(\"\");\r\n    const [selectedMedIdx, setSelectedMedIdx] = useState(0);\r\n    const [selectedPharmacyIdx, setSelectedPharmacyIdx] = useState(0);\r\n    const [activeKey, setActiveKey] = useState(\"select\");\r\n    const [currentMedications, setCurrMeds] = useState([{name: \"Paracetamol\", description: \"Pain reliever\", medicationId:1}, {name: \"Nurofen\", description: \"Anti-inflamatory\", medicationId:2}]);\r\n\r\n    let doseForms = doseTimes.map((x, idx) => {\r\n        const {time, repeats, dose} = x;\r\n        return <MedicationDose key={idx} idx={idx} time={time} repeats={repeats} dose={dose}\r\n                               doseTimes={doseTimes} setDoseTimes={(newDoses) => setDoseTimes(newDoses)} />\r\n    })\r\n\r\n    const submit = () => {\r\n        let objToSend;\r\n        if (activeKey === \"add-new\") {\r\n            objToSend = {medName, medDesc, medDoses: doseTimes, resId, pharmacyId: pharmacies[selectedPharmacyIdx].id};\r\n        } else {\r\n            const {name, description, medicationId} = currentMedications[selectedMedIdx];\r\n            objToSend = {medName: name, medDesc: description, medId: medicationId, medDoses: doseTimes, resId, pharmacyId: pharmacies[selectedPharmacyIdx].id};\r\n        }\r\n        //send off data\r\n        console.log(objToSend)\r\n        fetch(`${backendUrl}/medication`,\r\n            {method: \"POST\", body: JSON.stringify(objToSend), headers: {\"Content-Type\": \"application/json\"}})\r\n            .then(r => r.json())\r\n            .then(r => console.log(r));\r\n    }\r\n\r\n    useEffect( () => {\r\n        fetch(`${backendUrl}/medication?careHomeId=0`)\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                console.log(response)\r\n                setCurrMeds(response)\r\n            })\r\n    }, []);\r\n\r\n    const getPharmaciesForCareHome = () => {\r\n\r\n    }\r\n\r\n    return (\r\n            <Form>\r\n                <div className={\"medications-container\"}>\r\n                    <FormLabel>Medication</FormLabel>\r\n                    <Tabs activeKey={activeKey} onSelect={e => {\r\n                        console.log(e);\r\n                        setActiveKey(e)\r\n                    }}>\r\n                        <Tab eventKey={\"select\"} title={\"Select\"}>\r\n                            <Form.Control as=\"select\" value={selectedMedIdx} onChange={e => {\r\n                                console.log(e.target.value)\r\n                                setSelectedMedIdx(e.target.value)\r\n                            }}>\r\n                                {currentMedications.map((x,idx) => <option value={idx} key={idx + x.name}>{x.name}</option>)}\r\n                            </Form.Control>\r\n                        </Tab>\r\n                        <Tab eventKey={\"add-new\"} title={\"Add new\"}>\r\n                            <FormLabel>Name</FormLabel>\r\n                            <FormControl type={\"text\"} placeholder={\"Medication name...\"} value={medName} onChange={e => setMedName(e.target.value)}/>\r\n                            <FormLabel>Description</FormLabel>\r\n                            <FormControl as={\"textarea\"} rows={3} placeholder={\"Short description of the medication...\"} value={medDesc} onChange={e => setMedDesc(e.target.value)}/>\r\n                        </Tab>\r\n                    </Tabs>\r\n                </div>\r\n                <div className={\"pharmacy-container\"}>\r\n                    <FormLabel>Pharmacy:</FormLabel>\r\n                    <Form.Control as=\"select\" value={selectedPharmacyIdx} onChange={e => setSelectedPharmacyIdx(e.target.value)}>\r\n                        {pharmacies.map((x,idx) => <option value={idx}>{x.name}</option>)}\r\n                    </Form.Control>\r\n                </div>\r\n                <div className={\"medications-dose-container\"}>\r\n                    <FormLabel>Dose Times</FormLabel>\r\n                    {doseForms}\r\n                    <Button variant={\"light\"} onClick={e => {\r\n                        e.preventDefault();\r\n                        setDoseTimes(doseTimes.concat({time: new Date(), dose: \"25mg\", repeats: \"Every day\"}))\r\n                    }}>Add +</Button>\r\n                </div>\r\n                <Button variant={\"success\"} onClick={submit}>Submit!</Button>\r\n            </Form>\r\n    );\r\n}\r\n\r\nexport default MedicationForm;","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\email\\EmailStatusCategories.js",[],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\email\\ShowEmailContent.js",[],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\email\\EmailPreview.js",["176"],"import React, {useState} from 'react';\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport {READY, ASKED_IF_READY, SENT_INITIAL_EMAIL, PROCESSING, INQUIRY, COMPLETE} from \"./EmailStatusCategories\";\r\n\r\nimport \"./EmailPreview.css\";\r\nimport {backendUrl} from \"../config\";\r\nimport {dateIsYesterdayOrEarlier} from \"../helper/dateHelper\";\r\n\r\nconst EmailPreview = (props) => {\r\n    const {resident, status, medication, pharmacy, dateLastEmailSent, dateResponded, dateMedicationToBeReady, inquiryComment,nonGuessableId} = props;\r\n\r\n    let backgroundColour;\r\n    if (status === READY ) {\r\n        backgroundColour = \"green\";\r\n    } else if (status === ASKED_IF_READY) {\r\n        backgroundColour = \"paleturquoise\";\r\n    } else if (status === SENT_INITIAL_EMAIL) {\r\n        backgroundColour = \"lightyellow\";\r\n    } else if (status === PROCESSING) {\r\n        backgroundColour = \"cyan\";\r\n    } else if (status === INQUIRY) {\r\n        backgroundColour = \"red\";\r\n    } else if (status === COMPLETE) {\r\n        backgroundColour = \"grey\";\r\n    }\r\n\r\n    const tryResendEmail = () => {\r\n        fetch(`${backendUrl}/email/resend?id=${nonGuessableId}`)\r\n            .then(r => r.json());\r\n    }\r\n\r\n    const markCollected = () => {\r\n        fetch(`${backendUrl}/email/collected?id=${nonGuessableId}`)\r\n            .then(r => r.json());\r\n    }\r\n\r\n    const undoMarkCollected = () => {\r\n        fetch(`${backendUrl}/email/undo-collected?id=${nonGuessableId}`)\r\n            .then(r => r.json());\r\n    }\r\n\r\n    const lastEmailSentDate = new Date(dateLastEmailSent).toUTCString();\r\n    const pharmacyResponded = !dateResponded ? \"-\" : new Date(dateResponded).toUTCString();\r\n    const readyDate = !dateMedicationToBeReady ? \"-\" : new Date(dateMedicationToBeReady).toDateString();\r\n    const canResend = dateIsYesterdayOrEarlier(new Date(dateLastEmailSent));\r\n\r\n    let buttons;\r\n    if (status === COMPLETE) {\r\n        buttons = <div className={\"buttons-container\"}><Button onClick={() => undoMarkCollected()} variant={\"primary\"}>Oops - not yet collected!</Button></div>\r\n    } else if (status === READY) {\r\n        buttons = <div className={\"buttons-container\"}><Button onClick={() => markCollected()} variant={\"primary\"}>I've collected this!</Button></div>\r\n    } else {\r\n        buttons = (\r\n            <div className={\"buttons-container\"}>\r\n                <Button onClick={() => props.showEmailContent()} variant=\"primary\" block size={\"lg\"}>View Email</Button>\r\n                <Button onClick={() => canResend ? tryResendEmail() : null} variant=\"secondary\" block size={\"lg\"}\r\n                        disabled={!canResend}>Resend</Button>\r\n            </div>)\r\n    }\r\n\r\n    return (\r\n        <div className={`email-container`} style={{\"backgroundColor\": backgroundColour}}>\r\n            <div className={\"email-status\"}>{status.charAt(0).toUpperCase() + status.slice(1)}</div>\r\n            <div className={\"email-data\"}>\r\n                <p>Resident: </p><p>{resident}</p>\r\n                <p>Medication: </p><p>{medication}</p>\r\n                <p>Pharmacy: </p><p>{pharmacy}</p>\r\n                <p>Last email sent: </p><p>{lastEmailSentDate}</p>\r\n                <p>Pharmacy Responded: </p><p>{pharmacyResponded}</p>\r\n                <p>{status === INQUIRY ? \"Inquiry comment: \" : \"Date ready: \"}</p><p>{status === INQUIRY ? inquiryComment : readyDate}</p>\r\n            </div>\r\n            {buttons}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EmailPreview;\r\n","Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\shared\\FullPageCentered.js",[],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\alerts\\AlertItem.js",[],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\shared\\List.js",[],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\shared\\Quote.js",[],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\shared\\tooltip\\MedTooltip.js",[],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\medication\\MedicationDose.js",["177","178","179"],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\shared\\tooltip\\ResidentTooltip.js",[],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\helper\\dateHelper.js",[],"Z:\\Users\\stv14\\Documents\\Devmain\\CS2001Group3-FrontEnd\\src\\helper\\convertTimestampToDate.js",[],{"ruleId":"180","severity":1,"message":"181","line":16,"column":8,"nodeType":"182","messageId":"183","endLine":16,"endColumn":21},{"ruleId":"180","severity":1,"message":"184","line":61,"column":15,"nodeType":"182","messageId":"183","endLine":61,"endColumn":35},{"ruleId":"180","severity":1,"message":"185","line":80,"column":15,"nodeType":"182","messageId":"183","endLine":80,"endColumn":32},{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","replacedBy":"189"},{"ruleId":"180","severity":1,"message":"190","line":9,"column":9,"nodeType":"182","messageId":"183","endLine":9,"endColumn":19},{"ruleId":"180","severity":1,"message":"191","line":18,"column":26,"nodeType":"182","messageId":"183","endLine":18,"endColumn":36},{"ruleId":"180","severity":1,"message":"192","line":2,"column":8,"nodeType":"182","messageId":"183","endLine":2,"endColumn":14},{"ruleId":"193","severity":1,"message":"194","line":59,"column":58,"nodeType":"195","messageId":"196","endLine":59,"endColumn":60},{"ruleId":"193","severity":1,"message":"194","line":59,"column":79,"nodeType":"195","messageId":"196","endLine":59,"endColumn":81},{"ruleId":"197","severity":1,"message":"198","line":29,"column":8,"nodeType":"199","endLine":29,"endColumn":10,"suggestions":"200"},{"ruleId":"180","severity":1,"message":"192","line":2,"column":8,"nodeType":"182","messageId":"183","endLine":2,"endColumn":14},{"ruleId":"180","severity":1,"message":"201","line":5,"column":8,"nodeType":"182","messageId":"183","endLine":5,"endColumn":12},{"ruleId":"180","severity":1,"message":"202","line":6,"column":8,"nodeType":"182","messageId":"183","endLine":6,"endColumn":13},{"ruleId":"180","severity":1,"message":"203","line":10,"column":12,"nodeType":"182","messageId":"183","endLine":10,"endColumn":23},{"ruleId":"197","severity":1,"message":"198","line":27,"column":8,"nodeType":"199","endLine":27,"endColumn":10,"suggestions":"204"},{"ruleId":"180","severity":1,"message":"205","line":40,"column":9,"nodeType":"182","messageId":"183","endLine":40,"endColumn":23},{"ruleId":"197","severity":1,"message":"198","line":27,"column":8,"nodeType":"199","endLine":27,"endColumn":10,"suggestions":"206"},{"ruleId":"180","severity":1,"message":"207","line":6,"column":8,"nodeType":"182","messageId":"183","endLine":6,"endColumn":16},{"ruleId":"180","severity":1,"message":"208","line":21,"column":12,"nodeType":"182","messageId":"183","endLine":21,"endColumn":22},{"ruleId":"180","severity":1,"message":"209","line":21,"column":24,"nodeType":"182","messageId":"183","endLine":21,"endColumn":37},{"ruleId":"197","severity":1,"message":"210","line":44,"column":8,"nodeType":"199","endLine":44,"endColumn":10,"suggestions":"211"},{"ruleId":"197","severity":1,"message":"212","line":48,"column":8,"nodeType":"199","endLine":48,"endColumn":17,"suggestions":"213"},{"ruleId":"180","severity":1,"message":"214","line":75,"column":13,"nodeType":"182","messageId":"183","endLine":75,"endColumn":22},{"ruleId":"180","severity":1,"message":"215","line":1,"column":16,"nodeType":"182","messageId":"183","endLine":1,"endColumn":25},{"ruleId":"180","severity":1,"message":"216","line":1,"column":27,"nodeType":"182","messageId":"183","endLine":1,"endColumn":35},{"ruleId":"180","severity":1,"message":"217","line":2,"column":8,"nodeType":"182","messageId":"183","endLine":2,"endColumn":18},{"ruleId":"180","severity":1,"message":"218","line":50,"column":11,"nodeType":"182","messageId":"183","endLine":50,"endColumn":35},{"ruleId":"180","severity":1,"message":"216","line":1,"column":16,"nodeType":"182","messageId":"183","endLine":1,"endColumn":24},{"ruleId":"180","severity":1,"message":"216","line":1,"column":16,"nodeType":"182","messageId":"183","endLine":1,"endColumn":24},{"ruleId":"180","severity":1,"message":"192","line":5,"column":8,"nodeType":"182","messageId":"183","endLine":5,"endColumn":14},{"ruleId":"180","severity":1,"message":"219","line":12,"column":11,"nodeType":"182","messageId":"183","endLine":12,"endColumn":16},"no-unused-vars","'ParentTooltip' is defined but never used.","Identifier","unusedVar","'practiceTimelineData' is assigned a value but never used.","'medicationsAtTime' is assigned a value but never used.","no-native-reassign",["220"],"no-negated-in-lhs",["221"],"'backendUrl' is defined but never used.","'careHomeId' is assigned a value but never used.","'Button' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'requestId'. Either include it or remove the dependency array.","ArrayExpression",["222"],"'List' is defined but never used.","'Quote' is defined but never used.","'isSubmitted' is assigned a value but never used.",["223"],"'inquiryDetails' is assigned a value but never used.",["224"],"'ReactDOM' is defined but never used.","'timeoutIds' is assigned a value but never used.","'setTimeoutIds' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'xScale'. Either include it or remove the dependency array.",["225"],"React Hook useEffect has a missing dependency: 'draw'. Either include it or remove the dependency array.",["226"],"'selection' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'MedTooltip' is defined but never used.","'getPharmaciesForCareHome' is assigned a value but never used.","'times' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"227","fix":"228"},{"desc":"227","fix":"229"},{"desc":"227","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},"Update the dependencies array to be: [requestId]",{"range":"235","text":"236"},{"range":"237","text":"236"},{"range":"238","text":"236"},"Update the dependencies array to be: [xScale]",{"range":"239","text":"240"},"Update the dependencies array to be: [dosages, draw]",{"range":"241","text":"242"},[1434,1436],"[requestId]",[1263,1265],[1252,1254],[1523,1525],"[xScale]",[1578,1587],"[dosages, draw]"]