[{"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/index.js":"1","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/reportWebVitals.js":"2","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/medication/Medication_TEMP.js":"3","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/alerts/AlertsPage.js":"4","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/config.js":"5","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/App.js":"6","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Dashboard/Dashboard.jsx":"7","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/medication/MedicationForm.js":"8","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailSetDate.js":"9","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailPage.js":"10","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailReadyForCollection.js":"11","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/shared/FileUploadBtn.js":"12","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/ResidentsList.js":"13","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/shared/tooltip/ParentTooltip.js":"14","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/Residentprofile.js":"15","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/pharmacy/PharmacyPage.js":"16","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailInquiry.js":"17","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/shared/Timeline.js":"18","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/medication/MedicationDose.js":"19","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/AddResidentForm.js":"20","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/ResidentPreview.js":"21","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/helper/convertTimestampToDate.js":"22","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/EditResidentForm.js":"23"},{"size":595,"mtime":1614698897204,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1609075878890,"results":"26","hashOfConfig":"25"},{"size":682,"mtime":1614698897205,"results":"27","hashOfConfig":"25"},{"size":4458,"mtime":1614698897201,"results":"28","hashOfConfig":"25"},{"size":114,"mtime":1614698897201,"results":"29","hashOfConfig":"25"},{"size":7226,"mtime":1614698897192,"results":"30","hashOfConfig":"25"},{"size":4794,"mtime":1615405588499,"results":"31","hashOfConfig":"25"},{"size":5148,"mtime":1614698897205,"results":"32","hashOfConfig":"25"},{"size":3274,"mtime":1614698897203,"results":"33","hashOfConfig":"25"},{"size":3969,"mtime":1614698897202,"results":"34","hashOfConfig":"25"},{"size":2212,"mtime":1614698897202,"results":"35","hashOfConfig":"25"},{"size":898,"mtime":1614606779380,"results":"36","hashOfConfig":"25"},{"size":3682,"mtime":1614176632542,"results":"37","hashOfConfig":"25"},{"size":1503,"mtime":1614606779381,"results":"38","hashOfConfig":"25"},{"size":4728,"mtime":1614606779379,"results":"39","hashOfConfig":"25"},{"size":1685,"mtime":1614698897206,"results":"40","hashOfConfig":"25"},{"size":2712,"mtime":1609076484681,"results":"41","hashOfConfig":"25"},{"size":5032,"mtime":1614606779380,"results":"42","hashOfConfig":"25"},{"size":2484,"mtime":1614176632538,"results":"43","hashOfConfig":"25"},{"size":3297,"mtime":1614176632540,"results":"44","hashOfConfig":"25"},{"size":1900,"mtime":1614176632541,"results":"45","hashOfConfig":"25"},{"size":293,"mtime":1609076484683,"results":"46","hashOfConfig":"25"},{"size":3422,"mtime":1614698897206,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1tbvtix",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/index.js",[],["106","107"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/reportWebVitals.js",[],["108","109"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/medication/Medication_TEMP.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/alerts/AlertsPage.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/config.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/App.js",["110","111","112","113","114"],"import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport PharmacyPage from \"./pharmacy/PharmacyPage\";\nimport EmailPage from \"./email/EmailPage\";\nimport EmailSetDate from \"./email/EmailSetDate\";\nimport EmailInquiry from \"./email/EmailInquiry\";\nimport AlertsPage from \"./alerts/AlertsPage\";\nimport { backendUrl } from \"./config\";\nimport EmailReadyForCollection from \"./email/EmailReadyForCollection\";\nimport MedicationForm from \"./medication/MedicationForm\";\nimport Timeline from \"./shared/Timeline\";\nimport ParentTooltip from \"./shared/tooltip/ParentTooltip\";\nimport { createBrowserHistory as history } from \"history\";\n\nimport Medication_TEMP from \"./medication/Medication_TEMP\";\nimport FileUploadBtn from \"./shared/FileUploadBtn\";\n\nimport ResidentsList from \"./profile/ResidentsList\";\nimport Dashboard from \"./Dashboard/Dashboard\";\n\nimport Residentprofile from \"./profile/Residentprofile\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pharmacies: [],\n      careHome: { name: \"abc\", id: 0, email: \"abc@aol.com\" },\n      careHomeWorker: \"Peter\",\n      medicationDoses: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getPharmacies(this.state.careHome.id);\n\n    // fetch(`${backendUrl}/medication/schedule/?residentId=1`)\n    //     .then(r => r.json())\n    //     .then(r => {\n    //         console.log(r)\n    //         const dosages = r.map(x => {\n    //             return {...x, time: new Date(x.time), resident: x.residentName.split(\" \")[0], dose: x.dose, medicationName:x.medicationName}\n    //         })\n    //         this.setState({medicationDoses: dosages})\n    //     })\n\n    fetch(`${backendUrl}/medication/schedule/all/?careHomeId=0`)\n      .then((r) => r.json())\n      .then((r) => {\n        console.log(r);\n        const dosages = r.map((x) => {\n          return {\n            ...x,\n            time: new Date(x.time),\n            resident: x.residentName.split(\" \")[0],\n            dose: x.dose,\n            medicationName: x.medicationName,\n          };\n        });\n        this.setState({ medicationDoses: dosages });\n      });\n  }\n\n  getPharmacies(careHomeId) {\n    fetch(`${backendUrl}/pharmacy?careHomeId=${careHomeId}`)\n      .then((response) => response.text())\n      .then((response) => {\n        console.log({ pharmacies: JSON.parse(response) });\n        this.setState({ pharmacies: JSON.parse(response) });\n      });\n  }\n\n  render() {\n    const practiceTimelineData = [\n      {\n        medicationName: \"Paracetamol\",\n        dose: 2,\n        time: new Date(new Date().setHours(9)),\n        resident: \"Jimmy\",\n      },\n      {\n        medicationName: \"Paracetamol\",\n        dose: 2,\n        time: new Date(new Date().setHours(13)),\n        resident: \"Jimmy\",\n      },\n      {\n        medicationName: \"Deep heat\",\n        dose: 1,\n        time: new Date(new Date().setHours(9)),\n        resident: \"Jimmy\",\n      },\n      {\n        medicationName: \"Ibuprofen\",\n        dose: 1,\n        time: new Date(new Date().setHours(9)),\n        resident: \"Tom\",\n      },\n      {\n        medicationName: \"Ibuprofen\",\n        dose: 2,\n        time: new Date(new Date().setHours(20)),\n        resident: \"Tom\",\n      },\n      {\n        medicationName: \"Tylenol\",\n        dose: 2,\n        time: new Date(new Date().setHours(9)),\n        resident: \"Rebecca\",\n      },\n      {\n        medicationName: \"Tylenol\",\n        dose: 2,\n        time: new Date(new Date().setHours(13)),\n        resident: \"Rebecca\",\n      },\n      {\n        medicationName: \"Tylenol\",\n        dose: 2,\n        time: new Date(new Date().setHours(16)),\n        resident: \"Rebecca\",\n      },\n      {\n        medicationName: \"Tylenol\",\n        dose: 2,\n        time: new Date(new Date().setHours(20)),\n        resident: \"Rebecca\",\n      },\n    ];\n\n    // const medicationsAtTime = [\n    //     {medicationName: \"Paracetamol\", dose: 2, time: new Date(new Date().setHours(9)), resident: \"Jimmy\"},\n    //     {medicationName: \"Deep heat\", dose: 1, time: new Date(new Date().setHours(9)), resident: \"Jimmy\"},\n    //     {medicationName: \"Tylenol\", dose: 2, time: new Date(new Date().setHours(9)), resident: \"Rebecca\"},\n    //     {medicationName: \"Ibuprofen\", dose: 1, time:new Date(new Date().setHours(9)), resident: \"Tom\"}\n    // ]\n\n    const medicationsAtTime = [\n      {\n        medicationName: \"Tylenol\",\n        dose: \"15ml\",\n        time: new Date(new Date().setHours(9)),\n        resident: \"Rebecca\",\n      },\n      {\n        medicationName: \"Ibuprofen\",\n        dose: 2,\n        time: new Date(new Date().setHours(9)),\n        resident: \"Rebecca\",\n      },\n      {\n        medicationName: \"Paracetamol\",\n        dose: 2,\n        time: new Date(new Date().setHours(9)),\n        resident: \"Rebecca\",\n      },\n      {\n        medicationName: \"Deep Heat\",\n        dose: 1,\n        time: new Date(new Date().setHours(9)),\n        resident: \"Rebecca\",\n      },\n    ];\n\n    return (\n      <Router history={history}>\n        <switch>\n          <Route exact path=\"/\" render={(props) => <Dashboard />} />\n          <Route\n            exact\n            path=\"/file-upload\"\n            render={(props) => <FileUploadBtn isResident={true} id={1} />}\n          />\n          <Route exact path=\"/email\" component={EmailPage} />\n          <Route path=\"/resident\" render={() => <ResidentsList />} />\n          <Route\n            path=\"/medication-temp\"\n            render={(props) => (\n              <Medication_TEMP pharmacies={this.state.pharmacies} />\n            )}\n          />\n          <Route path=\"/email/set-date\" component={EmailSetDate} />\n          <Route path=\"/email/inquiry\" component={EmailInquiry} />\n          <Route\n            path=\"/email/ready-to-collect\"\n            component={EmailReadyForCollection}\n          />\n          <Route\n            path=\"/pharmacy\"\n            render={(props) => (\n              <PharmacyPage\n                {...props}\n                pharmacies={this.state.pharmacies}\n                careHomeId={this.state.careHome.id}\n                pharmaciesHaveChanged={() =>\n                  this.getPharmacies(this.state.careHome.id)\n                }\n              />\n            )}\n          />\n          <Route\n            path=\"/alerts\"\n            render={(props) => (\n              <AlertsPage\n                {...props}\n                careHomeName={this.state.careHome.name}\n                careHomeWorker={this.state.careHomeWorker}\n                careHomeEmail={this.state.careHome.email}\n                careHomeId={this.state.careHome.id}\n              />\n            )}\n          />\n          <Route\n            path=\"/medication-form\"\n            render={(props) => (\n              <MedicationForm\n                {...props}\n                resId={0}\n                pharmacies={this.state.pharmacies}\n              />\n            )}\n          />\n          <Route\n            path=\"/timeline\"\n            render={(props) => (\n              <div>\n                <Timeline dosages={this.state.medicationDoses} />\n              </div>\n            )}\n          />\n        </switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n",["115","116"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Dashboard/Dashboard.jsx",["117","118"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/medication/MedicationForm.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailSetDate.js",["119"],"import React, {useEffect, useState} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport FullPageCentered from \"../shared/FullPageCentered\";\nimport List from \"../shared/List\";\nimport {backendUrl} from \"../config\";\nimport {convertToYYYYMMDD} from \"../helper/convertTimestampToDate\";\n\nconst EmailSetDate = (props) => {\n    const [readyDate, setReadyDate] = useState(\"\");\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [careHomeName, setCareHomeName] = useState(\"-\");\n    const [residentName, setResidentName] = useState(\"-\");\n    const [medication, setMedication] = useState(\"-\");\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\n\n    //method to get the details of the medication from the database once the page loads\n    useEffect(() => {\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\n            .then(r => r.json())\n            .then(resp => {\n                console.log(resp);\n                setCareHomeName(resp.careHomeName || \"-\");\n                setResidentName(resp.residentName || \"-\");\n                setMedication(resp.medicationName || \"-\");\n                if (resp.dateMedicationToBeReady) { //if date is not set don't change default value\n                    setReadyDate(convertToYYYYMMDD(resp.dateMedicationToBeReady));\n                }\n            })\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\n\n\n    const submit = e => {\n        e.preventDefault();\n        console.log({readyDate, requestId});\n        fetch(`${backendUrl}/email/accept`, {\n            method: \"POST\",\n            body: JSON.stringify({readyDate, requestId}),\n            headers: {\"Content-Type\": \"application/json\"}\n        })\n            .then(response => response.json())\n            .then(r => {\n                console.log(r);\n                setIsSubmitted(true);\n            })\n            .catch(e => console.log(e));\n    }\n\n    //getting todays date so we can set the earliest date the medication is ready to today - i.e. the pharmacist cannot pick a past date\n    let now = new Date();\n    let today = now.getFullYear() + \"-\" + (now.getMonth() + 1) + \"-\" + now.getDate();\n\n    let inquiryDetails = {\n        \"Care Home\": careHomeName, Resident: residentName, Medication: medication\n    }\n\n    if (!isSubmitted) {\n        return (\n            <FullPageCentered background={\"#ccf6c8\"}>\n                <h2>Processing Medication</h2>\n                <List items={inquiryDetails}>\n                    <p>Date ready for collection:</p>\n                    <input type={\"date\"} min={today} onChange={e => setReadyDate(e.target.value)} value={readyDate}/>\n                </List>\n                <Button variant=\"primary\" onClick={e => submit(e)}>\n                    Let the care home know!\n                </Button>\n            </FullPageCentered>\n        );\n    } else {\n        return (\n            <FullPageCentered>\n                <h3>Confirmation sent to the care home that they can pick up the medication on:</h3>\n                <h3>{readyDate}</h3>\n            </FullPageCentered>\n        )\n    }\n}\n\nexport default EmailSetDate;\n","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailPage.js",["120","121"],"import React from 'react';\n\nimport TitleBar from \"../shared/TitleBar\";\nimport Form from \"react-bootstrap/Form\";\n\nimport \"./EmailPage.css\";\n\nimport {backendUrl} from \"../config\";\nimport EmailPreview from \"./EmailPreview\";\n\nimport {READY, ASKED_IF_READY, SENT_INITIAL_EMAIL, PROCESSING, INQUIRY, COMPLETE} from \"./EmailStatusCategories\";\nimport ShowEmailContent from \"./ShowEmailContent\";\n\n\nclass EmailPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {emailType:\"All\", emails: [], emailHtml: \"\", showEmailHtml: \"\", intervalId: -1};\n    }\n\n    componentDidMount() {\n        this.getDataFromDb();\n        this.setState({intervalId: setInterval(() => this.getDataFromDb(), 30000)}) //check email state every 30 seconds\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.state.intervalId);\n    }\n\n    getDataFromDb() {\n        fetch(`${backendUrl}/email?careHomeId=0`)\n            .then(response => response.text())\n            .then(response => {\n                console.log(JSON.parse(response))\n                this.setState({emails: JSON.parse(response)})\n            })\n    }\n\n    showEmailContent(nonGuessableId) {\n        fetch(`${backendUrl}/email/show-email-content?id=${nonGuessableId}`)\n            .then(response => response.text())\n            .then(response => {\n                this.setState({emailHtml: JSON.parse(response).emailHtml, showEmailHtml: true})\n            })\n    }\n\n    hideEmailContent() {\n        this.setState({showEmailHtml: false, emailHtml: \"\"})\n    }\n\n    render() {\n        let {emails, emailType} = this.state;\n        // emails = [\n        //     {residentName: \"Gerald Hornet\", medicationName:\"Paracetamol 20 tablets 25g\", pharmacyName:\"Croyden corner\", dateSent:\"02-12-20 12:34\", dateResponded: null, status:\"unresponded\"},\n        //     {residentName: \"Mary Whippersville\", medicationName:\"IbuProfen 20 tablets 25g\", pharmacyName:\"Croyden corner\", dateSent:\"02-12-20 12:34\", dateResponded: null, status:\"accepted\"},\n        //     {residentName: \"Guy from trainspotting\", medicationName:\"1kg heroin\", pharmacyName:\"Croyden corner\", dateSent:\"02-12-20 12:34\", dateResponded: null, status:\"rejected\"}\n        // ]\n        console.log(emails)\n        let emailPreviews = emails.filter(x => emailType == \"All\" || x.status == emailType)\n            .map((email,idx) =>\n            <EmailPreview resident={email.residentName} medication={email.medicationName} pharmacy={email.pharmacyEmail} dateLastEmailSent={email.dateLastEmailSent}\n                          dateResponded={email.dateUpdatedByPharmacy} dateMedicationToBeReady={email.dateMedicationToBeReady} inquiryComment={email.pharmacyComment}\n                          status={email.status} nonGuessableId={email.nonGuessableId} showEmailContent={() => this.showEmailContent(email.nonGuessableId)} key={idx} />\n        );\n\n        return (\n            <main>\n                <TitleBar title={\"Emails Sent\"}>\n                    <Form.Control as={\"select\"} custom onChange={(e) => {\n                        console.log(e)\n                        console.log(e.target.value.toLowerCase())\n                        this.setState({emailType: e.target.value})}\n                    } >\n                        <option>All</option>\n                        <option>{SENT_INITIAL_EMAIL}</option>\n                        <option>{PROCESSING}</option>\n                        <option>{INQUIRY}</option>\n                        <option>{ASKED_IF_READY}</option>\n                        <option>{READY}</option>\n                        <option>{COMPLETE}</option>\n                    </Form.Control>\n                </TitleBar>\n                <div className={\"list\"}>\n                    {emailPreviews}\n                </div>\n                <ShowEmailContent show={this.state.showEmailHtml} close={() => this.hideEmailContent()} emailHtml={this.state.emailHtml}/>\n            </main>\n        );\n    }\n}\n\nexport default EmailPage;\n","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailReadyForCollection.js",["122","123","124","125","126","127"],"import React, {useEffect, useState} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport {backendUrl} from \"../config\";\nimport FullPageCentered from \"../shared/FullPageCentered\";\nimport List from \"../shared/List\";\nimport Quote from \"../shared/Quote\";\n\nconst EmailReadyForCollection = (props) => {\n    const [comment, setComment] = useState(\"\");\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [careHomeName, setCareHomeName] = useState(\"-\");\n    const [residentName, setResidentName] = useState(\"-\");\n    const [medication, setMedication] = useState(\"-\");\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\n\n    //method to get the details of the medication from the database once the page loads\n    useEffect(() => {\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\n            .then(r => r.json())\n            .then(resp => {\n                console.log(resp);\n                setCareHomeName(resp.careHomeName || \"-\");\n                setResidentName(resp.residentName || \"-\");\n                setMedication(resp.medicationName || \"-\");\n                setComment(resp.pharmacyComment || \"\");\n            })\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\n\n    const submit = e => {\n        if (e) e.preventDefault();\n        fetch(`${backendUrl}/email/ready-for-collection`, {method: \"POST\", body: JSON.stringify({comment,requestId}), headers: {\"Content-Type\": \"application/json\"}})\n            .then(response => response.json())\n            .then(r => {\n                console.log(r)\n                setIsSubmitted(true);\n            })\n            .catch(e => console.log(e));\n    }\n\n    let inquiryDetails = {\n        \"Care Home\": careHomeName,\n        Resident: residentName,\n        Medication: medication\n    }\n\n    //automatically submitting.\n    submit();\n\n    return (\n        <FullPageCentered>\n            <h3>{careHomeName} will be notified that {medication} is ready to collect now!</h3>\n        </FullPageCentered>\n    )\n}\n\nexport default EmailReadyForCollection;\n","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/shared/FileUploadBtn.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/ResidentsList.js",["128"],"import React from 'react';\nimport TitleBar from \"../shared/TitleBar\";\nimport Button from \"react-bootstrap/Button\";\nimport { backendUrl } from \"../config\";\n\n//import \"./PharmacyPage.css\";\nimport AddResidentForm from \"./AddResidentForm\";\nimport ResidentPreview from './ResidentPreview';\nimport Residentprofile from \"./Residentprofile\";\n// import Residentprofile from './Residentprofile';\n\nclass ResidentsList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {residents: [], showForm: false };\n    }\n\n    componentDidMount() {\n        this.getDataFromDb();\n    }\n\n    getDataFromDb() {\n        fetch(`${backendUrl}/resident/all?careHomeId=0`)\n            .then(response => response.json())\n            .then(response => {\n                console.log(response)\n                if (!response.status || response.status === 200) {\n                    this.setState({residents: response})\n                }\n            })\n    }\n\n    handleSubmission() {\n        fetch(`${backendUrl}/resident`, {method: \"POST\", body: \"\", headers: {\"Content-Type\": \"application/json\"}})\n            .then(response => this.getDataFromDb());\n        this.setState({showForm: false})\n        window.location.reload(false);\n    }\n\n    render() {\n        let id = window.location.pathname.split(\"/\")[2];\n        console.log(id)\n\n        const {residents, showForm} = this.state;\n\n        console.log(this.state.residents, this.state.residents.length)\n\n        if (id) {\n            //need to go through all residents and find the one with this ID\n            const resident = this.state.residents.filter(x => x.residentId == id)[0]\n            if (resident) {\n                const {residentId, bio, age, guardName, firstName, surName, archived} = resident;\n                return (\n                    <Residentprofile\n                        resId={residentId}\n                        bio={bio}\n                        age={age}\n                        guardName={guardName}\n                        firstName={firstName}\n                        surName={surName}\n                        archived={archived}/>\n                )\n            }\n        }\n\n        //we don't add else here. designed so that if the ID isn't a resident, we still display the list.\n        let residentPreviews = residents.map((resident,idx) =>\n            <ResidentPreview handleSubmission={() => this.handleSubmission()}\n                                                archived={resident.archived} \n                                                firstName={resident.firstName} \n                                                surName={resident.surName}\n                                                resId={resident.residentId}\n                                                bio={resident.bio}\n                                                age={resident.age} \n                                                guardName={resident.guardianName}\n                                                key={idx} />\n        );\n        \n        \n        return (\n            <main>\n                <TitleBar title={\"My Residents\"}>\n                    <Button variant=\"primary\" onClick={() => this.setState({showForm: true})}>Add new</Button>\n                </TitleBar>\n                <div className={\"list\"}>\n                    {residentPreviews}\n                </div>\n                {showForm && <AddResidentForm\n                    show={showForm}\n                    handleClose={() => this.setState({showForm: false})} \n                    handleSubmission={() => this.handleSubmission()}\n                />}\n            </main>\n        );\n    }\n    \n}\n    export default ResidentsList;\n",["129","130"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/shared/tooltip/ParentTooltip.js",["131","132","133"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/Residentprofile.js",["134"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/pharmacy/PharmacyPage.js",["135","136"],"import React from 'react';\n\nimport PharmacyPreview from \"./PharmacyPreview\";\nimport TitleBar from \"../shared/TitleBar\";\nimport Button from \"react-bootstrap/Button\";\n\nimport \"./PharmacyPage.css\";\nimport AddPharmacyForm from \"./AddPharmacyForm\";\nimport {backendUrl} from \"../config\";\n\nclass PharmacyPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {showForm: false};\n    }\n\n    render() {\n        let {pharmacies, careHomeId, pharmaciesHaveChanged} = this.props;\n        let {showForm} = this.state;\n        let pharmacyPreviews = pharmacies.map((pharmacy,idx) =>\n            <PharmacyPreview title={pharmacy.name} isDefault={pharmacy.default}\n                             hasPhone={pharmacy.phoneNumb} hasEmail={pharmacy.email}\n                             hasAddress={pharmacy.address && pharmacy.address.length>0} key={idx} /> );\n\n        return (\n            <main>\n                <TitleBar title={\"My Pharmacies\"}>\n                    <Button variant=\"primary\" onClick={() => this.setState({showForm: true})}>Add new</Button>\n                </TitleBar>\n                <div className={\"list\"}>\n                    {pharmacyPreviews}\n                </div>\n                {showForm && <AddPharmacyForm\n                    show={showForm}\n                    handleClose={() => this.setState({showForm: false})}\n                    handleSubmission={() => {\n                        pharmaciesHaveChanged();\n                        this.setState({showForm: false})\n                    }}\n                    careHomeId={this.props.careHomeId}\n                />}\n            </main>\n        );\n    }\n}\n\nexport default PharmacyPage;\n","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailInquiry.js",["137"],"import React, {useEffect, useState} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport {backendUrl} from \"../config\";\nimport FullPageCentered from \"../shared/FullPageCentered\";\nimport List from \"../shared/List\";\nimport Quote from \"../shared/Quote\";\n\nconst EmailInquiry = (props) => {\n    const [comment, setComment] = useState(\"\");\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [careHomeName, setCareHomeName] = useState(\"-\");\n    const [residentName, setResidentName] = useState(\"-\");\n    const [medication, setMedication] = useState(\"-\");\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\n\n    //method to get the details of the medication from the database once the page loads\n    useEffect(() => {\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\n            .then(r => r.json())\n            .then(resp => {\n                console.log(resp);\n                setCareHomeName(resp.careHomeName || \"-\");\n                setResidentName(resp.residentName || \"-\");\n                setMedication(resp.medicationName || \"-\");\n                setComment(resp.pharmacyComment || \"\");\n            })\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\n\n    const submit = e => {\n        e.preventDefault();\n        fetch(`${backendUrl}/email/reject`, {method: \"POST\", body: JSON.stringify({comment,requestId}), headers: {\"Content-Type\": \"application/json\"}})\n            .then(response => response.json())\n            .then(r => {\n                console.log(r)\n                setIsSubmitted(true);\n            })\n            .catch(e => console.log(e));\n    }\n\n    let inquiryDetails = {\n        \"Care Home\": careHomeName,\n        Resident: residentName,\n        Medication: medication\n    }\n\n    if (!isSubmitted) {\n        return (\n            <FullPageCentered background={\"#f6d6ad\"} >\n                <h2>Inquiry needed</h2>\n                <List items={inquiryDetails}>\n                    <p>Inquiry comment</p>\n                    <textarea rows={4} onChange={e => setComment(e.target.value)} value={comment} />\n                </List>\n                <Button variant=\"primary\" onClick={e => submit(e)}>\n                    Let the care home know!\n                </Button>\n            </FullPageCentered>\n        );\n    } else {\n        return (\n            <FullPageCentered>\n                <h3>Inquiry submitted to the care home with the comment:</h3>\n                <Quote quote={comment} />\n            </FullPageCentered>\n        )\n    }\n}\n\nexport default EmailInquiry;\n",["138","139"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/shared/Timeline.js",["140","141","142","143"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/medication/MedicationDose.js",["144","145"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/AddResidentForm.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/ResidentPreview.js",["146","147","148","149","150"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/helper/convertTimestampToDate.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/EditResidentForm.js",[],{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"151","replacedBy":"155"},{"ruleId":"153","replacedBy":"156"},{"ruleId":"157","severity":1,"message":"158","line":16,"column":8,"nodeType":"159","messageId":"160","endLine":16,"endColumn":21},{"ruleId":"157","severity":1,"message":"161","line":25,"column":8,"nodeType":"159","messageId":"160","endLine":25,"endColumn":23},{"ruleId":"157","severity":1,"message":"162","line":78,"column":11,"nodeType":"159","messageId":"160","endLine":78,"endColumn":31},{"ruleId":"157","severity":1,"message":"163","line":142,"column":11,"nodeType":"159","messageId":"160","endLine":142,"endColumn":28},{"ruleId":"164","severity":1,"message":"165","line":183,"column":15,"nodeType":"166","endLine":183,"endColumn":69},{"ruleId":"151","replacedBy":"167"},{"ruleId":"153","replacedBy":"168"},{"ruleId":"157","severity":1,"message":"169","line":1,"column":17,"nodeType":"159","messageId":"160","endLine":1,"endColumn":26},{"ruleId":"157","severity":1,"message":"170","line":21,"column":9,"nodeType":"159","messageId":"160","endLine":21,"endColumn":25},{"ruleId":"171","severity":1,"message":"172","line":29,"column":8,"nodeType":"173","endLine":29,"endColumn":10,"suggestions":"174"},{"ruleId":"175","severity":1,"message":"176","line":59,"column":58,"nodeType":"177","messageId":"178","endLine":59,"endColumn":60},{"ruleId":"175","severity":1,"message":"176","line":59,"column":79,"nodeType":"177","messageId":"178","endLine":59,"endColumn":81},{"ruleId":"157","severity":1,"message":"179","line":2,"column":8,"nodeType":"159","messageId":"160","endLine":2,"endColumn":14},{"ruleId":"157","severity":1,"message":"180","line":5,"column":8,"nodeType":"159","messageId":"160","endLine":5,"endColumn":12},{"ruleId":"157","severity":1,"message":"181","line":6,"column":8,"nodeType":"159","messageId":"160","endLine":6,"endColumn":13},{"ruleId":"157","severity":1,"message":"182","line":10,"column":12,"nodeType":"159","messageId":"160","endLine":10,"endColumn":23},{"ruleId":"171","severity":1,"message":"172","line":27,"column":8,"nodeType":"173","endLine":27,"endColumn":10,"suggestions":"183"},{"ruleId":"157","severity":1,"message":"184","line":40,"column":9,"nodeType":"159","messageId":"160","endLine":40,"endColumn":23},{"ruleId":"175","severity":1,"message":"176","line":50,"column":76,"nodeType":"177","messageId":"178","endLine":50,"endColumn":78},{"ruleId":"151","replacedBy":"185"},{"ruleId":"153","replacedBy":"186"},{"ruleId":"157","severity":1,"message":"187","line":1,"column":16,"nodeType":"159","messageId":"160","endLine":1,"endColumn":25},{"ruleId":"157","severity":1,"message":"188","line":1,"column":27,"nodeType":"159","messageId":"160","endLine":1,"endColumn":35},{"ruleId":"157","severity":1,"message":"189","line":2,"column":8,"nodeType":"159","messageId":"160","endLine":2,"endColumn":18},{"ruleId":"171","severity":1,"message":"190","line":25,"column":8,"nodeType":"173","endLine":25,"endColumn":10,"suggestions":"191"},{"ruleId":"157","severity":1,"message":"192","line":9,"column":9,"nodeType":"159","messageId":"160","endLine":9,"endColumn":19},{"ruleId":"157","severity":1,"message":"193","line":18,"column":26,"nodeType":"159","messageId":"160","endLine":18,"endColumn":36},{"ruleId":"171","severity":1,"message":"172","line":27,"column":8,"nodeType":"173","endLine":27,"endColumn":10,"suggestions":"194"},{"ruleId":"151","replacedBy":"195"},{"ruleId":"153","replacedBy":"196"},{"ruleId":"157","severity":1,"message":"197","line":6,"column":8,"nodeType":"159","messageId":"160","endLine":6,"endColumn":16},{"ruleId":"171","severity":1,"message":"198","line":43,"column":8,"nodeType":"173","endLine":43,"endColumn":10,"suggestions":"199"},{"ruleId":"171","severity":1,"message":"200","line":47,"column":8,"nodeType":"173","endLine":47,"endColumn":17,"suggestions":"201"},{"ruleId":"157","severity":1,"message":"202","line":74,"column":13,"nodeType":"159","messageId":"160","endLine":74,"endColumn":22},{"ruleId":"157","severity":1,"message":"188","line":1,"column":16,"nodeType":"159","messageId":"160","endLine":1,"endColumn":24},{"ruleId":"157","severity":1,"message":"203","line":12,"column":11,"nodeType":"159","messageId":"160","endLine":12,"endColumn":16},{"ruleId":"157","severity":1,"message":"204","line":2,"column":35,"nodeType":"159","messageId":"160","endLine":2,"endColumn":41},{"ruleId":"157","severity":1,"message":"205","line":2,"column":43,"nodeType":"159","messageId":"160","endLine":2,"endColumn":48},{"ruleId":"157","severity":1,"message":"206","line":2,"column":50,"nodeType":"159","messageId":"160","endLine":2,"endColumn":54},{"ruleId":"157","severity":1,"message":"161","line":8,"column":8,"nodeType":"159","messageId":"160","endLine":8,"endColumn":23},{"ruleId":"157","severity":1,"message":"207","line":9,"column":8,"nodeType":"159","messageId":"160","endLine":9,"endColumn":19},"no-native-reassign",["208"],"no-negated-in-lhs",["209"],["208"],["209"],"no-unused-vars","'ParentTooltip' is defined but never used.","Identifier","unusedVar","'Residentprofile' is defined but never used.","'practiceTimelineData' is assigned a value but never used.","'medicationsAtTime' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component Medication_TEMP must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement",["208"],["209"],"'Component' is defined but never used.","'handleMedication' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'requestId'. Either include it or remove the dependency array.","ArrayExpression",["210"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Button' is defined but never used.","'List' is defined but never used.","'Quote' is defined but never used.","'isSubmitted' is assigned a value but never used.",["211"],"'inquiryDetails' is assigned a value but never used.",["208"],["209"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'MedTooltip' is defined but never used.","React Hook useEffect has missing dependencies: 'getResDosages' and 'getResImg'. Either include them or remove the dependency array.",["212"],"'backendUrl' is defined but never used.","'careHomeId' is assigned a value but never used.",["213"],["208"],["209"],"'ReactDOM' is defined but never used.","React Hook useEffect has a missing dependency: 'xScale'. Either include it or remove the dependency array.",["214"],"React Hook useEffect has a missing dependency: 'draw'. Either include it or remove the dependency array.",["215"],"'selection' is assigned a value but never used.","'times' is assigned a value but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'ArchResProf' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"216","fix":"217"},{"desc":"216","fix":"218"},{"desc":"219","fix":"220"},{"desc":"216","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},"Update the dependencies array to be: [requestId]",{"range":"226","text":"227"},{"range":"228","text":"227"},"Update the dependencies array to be: [getResDosages, getResImg]",{"range":"229","text":"230"},{"range":"231","text":"227"},"Update the dependencies array to be: [xScale]",{"range":"232","text":"233"},"Update the dependencies array to be: [dosages, draw]",{"range":"234","text":"235"},[1406,1408],"[requestId]",[1237,1239],[768,770],"[getResDosages, getResImg]",[1226,1228],[1425,1427],"[xScale]",[1476,1485],"[dosages, draw]"]