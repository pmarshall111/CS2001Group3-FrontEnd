[{"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/index.js":"1","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailInquiry.js":"2","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/helper/convertTimestampToDate.js":"3","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/config.js":"4","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailPage.js":"5","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailPreview.js":"6","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/reportWebVitals.js":"7","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailConfirmation.js":"8","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/App.js":"9","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/pharmacy/PharmacyPage.js":"10","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/ListDetailsCompoenet.jsx":"11","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/pharmacy/PharmacyPreview.js":"12","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/shared/List.js":"13","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/MedicationsDetails.js":"14","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/HomePage.jsx":"15"},{"size":500,"mtime":1609075878888,"results":"16","hashOfConfig":"17"},{"size":2712,"mtime":1609076484681,"results":"18","hashOfConfig":"17"},{"size":293,"mtime":1609076484683,"results":"19","hashOfConfig":"17"},{"size":302,"mtime":1609078190173,"results":"20","hashOfConfig":"17"},{"size":2773,"mtime":1609076484682,"results":"21","hashOfConfig":"17"},{"size":1202,"mtime":1609076484683,"results":"22","hashOfConfig":"17"},{"size":362,"mtime":1609075878890,"results":"23","hashOfConfig":"17"},{"size":3618,"mtime":1609076484681,"results":"24","hashOfConfig":"17"},{"size":1028,"mtime":1611926039786,"results":"25","hashOfConfig":"17"},{"size":2214,"mtime":1609076484684,"results":"26","hashOfConfig":"17"},{"size":1496,"mtime":1611925696829,"results":"27","hashOfConfig":"17"},{"size":889,"mtime":1609075878890,"results":"28","hashOfConfig":"17"},{"size":421,"mtime":1609076484686,"results":"29","hashOfConfig":"17"},{"size":245,"mtime":1611514465364,"results":"30","hashOfConfig":"17"},{"size":2741,"mtime":1611928474784,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1tbvtix",{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/index.js",[],["70","71"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailInquiry.js",["72"],"import React, {useEffect, useState} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport {backendUrl} from \"../config\";\nimport FullPageCentered from \"../shared/FullPageCentered\";\nimport List from \"../shared/List\";\nimport Quote from \"../shared/Quote\";\n\nconst EmailInquiry = (props) => {\n    const [comment, setComment] = useState(\"\");\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [careHomeName, setCareHomeName] = useState(\"-\");\n    const [residentName, setResidentName] = useState(\"-\");\n    const [medication, setMedication] = useState(\"-\");\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\n\n    //method to get the details of the medication from the database once the page loads\n    useEffect(() => {\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\n            .then(r => r.json())\n            .then(resp => {\n                console.log(resp);\n                setCareHomeName(resp.careHomeName || \"-\");\n                setResidentName(resp.residentName || \"-\");\n                setMedication(resp.medicationName || \"-\");\n                setComment(resp.pharmacyComment || \"\");\n            })\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\n\n    const submit = e => {\n        e.preventDefault();\n        fetch(`${backendUrl}/email/reject`, {method: \"POST\", body: JSON.stringify({comment,requestId}), headers: {\"Content-Type\": \"application/json\"}})\n            .then(response => response.json())\n            .then(r => {\n                console.log(r)\n                setIsSubmitted(true);\n            })\n            .catch(e => console.log(e));\n    }\n\n    let inquiryDetails = {\n        \"Care Home\": careHomeName,\n        Resident: residentName,\n        Medication: medication\n    }\n\n    if (!isSubmitted) {\n        return (\n            <FullPageCentered background={\"#f6d6ad\"} >\n                <h2>Inquiry needed</h2>\n                <List items={inquiryDetails}>\n                    <p>Inquiry comment</p>\n                    <textarea rows={4} onChange={e => setComment(e.target.value)} value={comment} />\n                </List>\n                <Button variant=\"primary\" onClick={e => submit(e)}>\n                    Let the care home know!\n                </Button>\n            </FullPageCentered>\n        );\n    } else {\n        return (\n            <FullPageCentered>\n                <h3>Inquiry submitted to the care home with the comment:</h3>\n                <Quote quote={comment} />\n            </FullPageCentered>\n        )\n    }\n}\n\nexport default EmailInquiry;\n",["73","74"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/helper/convertTimestampToDate.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/config.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailPage.js",["75","76"],"import React from 'react';\n\nimport TitleBar from \"../shared/TitleBar\";\nimport Form from \"react-bootstrap/Form\";\n\nimport \"./EmailPage.css\";\n\nimport {backendUrl, authHeader} from \"../config\";\nimport EmailPreview from \"./EmailPreview\";\n\nclass EmailPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {emailType:\"all\", emails: []};\n    }\n\n    componentDidMount() {\n        this.getDataFromDb();\n    }\n\n    getDataFromDb() {\n        const options = {\n            withCredentials: true,\n            method: 'GET',\n            headers: {\n                'Authorization': authHeader\n            }\n        }\n        fetch(`http://${backendUrl}/email?careHomeName=abc`, options)\n            .then(response => response.text())\n            .then(response => {\n                console.log(JSON.parse(response))\n                this.setState({emails: JSON.parse(response)})\n            })\n    }\n\n    render() {\n        let {emails, emailType} = this.state;\n        // emails = [\n        //     {residentName: \"Gerald Hornet\", medicationName:\"Paracetamol 20 tablets 25g\", pharmacyName:\"Croyden corner\", dateSent:\"02-12-20 12:34\", dateResponded: null, status:\"unresponded\"},\n        //     {residentName: \"Mary Whippersville\", medicationName:\"IbuProfen 20 tablets 25g\", pharmacyName:\"Croyden corner\", dateSent:\"02-12-20 12:34\", dateResponded: null, status:\"accepted\"},\n        //     {residentName: \"Guy from trainspotting\", medicationName:\"1kg heroin\", pharmacyName:\"Croyden corner\", dateSent:\"02-12-20 12:34\", dateResponded: null, status:\"rejected\"}\n        // ]\n        let emailPreviews = emails.filter(x => emailType == \"all\" || x.status == emailType)\n            .map((email,idx) =>\n            <EmailPreview resident={email.residentName} medication={email.medicationName} pharmacy={email.pharmacyName}\n                          dateSent={email.dateSent} dateResponded={email.dateResponded} status={email.status} key={idx} />\n        );\n\n        return (\n            <main>\n                <TitleBar title={\"Emails Sent\"}>\n                    <Form.Control as={\"select\"} custom onChange={(e) => {\n                        console.log(e)\n                        console.log(e.target.value.toLowerCase())\n                        this.setState({emailType: e.target.value.toLowerCase()})}\n                    } >\n                        <option>All</option>\n                        <option>Accepted</option>\n                        <option>Unresponded</option>\n                        <option>Rejected</option>\n                    </Form.Control>\n                </TitleBar>\n                <div className={\"list\"}>\n                    {emailPreviews}\n                </div>\n            </main>\n        );\n    }\n}\n\nexport default EmailPage;\n",["77","78"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailPreview.js",["79","80","81"],"import React from 'react';\nimport Button from \"react-bootstrap/Button\";\n\nimport \"./EmailPreview.css\";\n\nconst EmailPreview = (props) => {\n    let backgroundColour;\n    if (props.status == \"accepted\") {\n        backgroundColour = \"green\";\n    } else if (props.status == \"unresponded\") {\n        backgroundColour = \"yellow\";\n    } else if (props.status == \"rejected\") {\n        backgroundColour = \"red\";\n    }\n    return (\n        <div className={`email-container`} style={{\"backgroundColor\": backgroundColour}}>\n            <div className={\"email-status\"}>{props.status.charAt(0).toUpperCase() + props.status.slice(1)}</div>\n            <div className={\"email-data\"}>\n                <p>Resident: </p><p>{props.resident}</p>\n                <p>Medication: </p><p>{props.medication}</p>\n                <p>Pharmacy: </p><p>{props.pharmacy}</p>\n                <p>Date requested: </p><p>{props.dateSent}</p>\n                <p>Date responded: </p><p>{props.dateResponded || \"-\"}</p>\n            </div>\n            <Button variant=\"primary\" block size={\"lg\"}>View Email</Button>\n            <Button variant=\"secondary\" block size={\"lg\"}>Resend</Button>\n        </div>\n    );\n}\n\nexport default EmailPreview;\n","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/reportWebVitals.js",[],["82","83"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailConfirmation.js",["84"],"import React, {useEffect, useState} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport FullPageCentered from \"../shared/FullPageCentered\";\nimport List from \"../shared/List\";\nimport {backendUrl} from \"../config\";\nimport {convertToYYYYMMDD} from \"../helper/convertTimestampToDate\";\n\nconst EmailConfirmation = (props) => {\n    const [readyDate, setReadyDate] = useState(\"\");\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [careHomeName, setCareHomeName] = useState(\"-\");\n    const [residentName, setResidentName] = useState(\"-\");\n    const [medication, setMedication] = useState(\"-\");\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\n\n    //method to get the details of the medication from the database once the page loads\n    useEffect(() => {\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\n            .then(r => r.json())\n            .then(resp => {\n                console.log(resp);\n                setCareHomeName(resp.careHomeName || \"-\");\n                setResidentName(resp.residentName || \"-\");\n                setMedication(resp.medicationName || \"-\");\n                if (resp.dateMedicationToBeReady) { //if date is not set don't change default value\n                    setReadyDate(convertToYYYYMMDD(resp.dateMedicationToBeReady));\n                }\n            })\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\n\n\n    const submit = e => {\n        e.preventDefault();\n        console.log({readyDate, requestId});\n        fetch(`${backendUrl}/email/accept`, {method: \"POST\", body: JSON.stringify({readyDate,requestId}), headers: {\"Content-Type\": \"application/json\"}})\n            .then(response => response.json())\n            .then(r => {\n                console.log(r);\n                setIsSubmitted(true);\n            })\n            .catch(e => console.log(e));\n    }\n\n    //getting todays date so we can set the earliest date the medication is ready to today - i.e. the pharmacist cannot pick a past date\n    let now = new Date();\n    let today =  now.getFullYear() + \"-\" + (now.getMonth()+1) + \"-\" + now.getDate();\n\n    let inquiryDetails = {\n        \"Care Home\": careHomeName, Resident: residentName, Medication: medication\n    }\n\n    if (!isSubmitted) {\n        return (\n            <FullPageCentered background={\"#ccf6c8\"} >\n                <h2>Processing Medication</h2>\n                <List items={inquiryDetails}>\n                    <p>Date ready for collection:</p>\n                    <input type={\"date\"} min={today} onChange={e => setReadyDate(e.target.value)} value={readyDate} />\n                </List>\n                <Button variant=\"primary\" onClick={e => submit(e)}>\n                    Let the care home know!\n                </Button>\n            </FullPageCentered>\n        );\n    } else {\n        return (\n            <FullPageCentered>\n                <h3>Confirmation sent to the care home that they can pick up the medication on:</h3>\n                <h3>{readyDate}</h3>\n            </FullPageCentered>\n        )\n    }\n}\n\n\n// <Form>\n//     <h1>Confirming medication order</h1>\n//     <p>The date this medication should be available is:</p>\n//     <Form.Group controlId=\"date\">\n//         <Form.Control type=\"date\" min={today} onChange={e => setReadyDate(e.target.value)} />\n//     </Form.Group>\n//     <Button variant=\"primary\" onClick={e => submit(e)}>\n//         Confirm\n//     </Button>\n// </Form>\n\nexport default EmailConfirmation;\n","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/App.js",["85","86"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/pharmacy/PharmacyPage.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/ListDetailsCompoenet.jsx",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/pharmacy/PharmacyPreview.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/shared/List.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/MedicationsDetails.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/HomePage.jsx",[],{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":27,"column":8,"nodeType":"93","endLine":27,"endColumn":10,"suggestions":"94"},{"ruleId":"87","replacedBy":"95"},{"ruleId":"89","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":44,"column":58,"nodeType":"99","messageId":"100","endLine":44,"endColumn":60},{"ruleId":"97","severity":1,"message":"98","line":44,"column":79,"nodeType":"99","messageId":"100","endLine":44,"endColumn":81},{"ruleId":"87","replacedBy":"101"},{"ruleId":"89","replacedBy":"102"},{"ruleId":"97","severity":1,"message":"98","line":8,"column":22,"nodeType":"99","messageId":"100","endLine":8,"endColumn":24},{"ruleId":"97","severity":1,"message":"98","line":10,"column":29,"nodeType":"99","messageId":"100","endLine":10,"endColumn":31},{"ruleId":"97","severity":1,"message":"98","line":12,"column":29,"nodeType":"99","messageId":"100","endLine":12,"endColumn":31},{"ruleId":"87","replacedBy":"103"},{"ruleId":"89","replacedBy":"104"},{"ruleId":"91","severity":1,"message":"92","line":29,"column":8,"nodeType":"93","endLine":29,"endColumn":10,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":3,"column":8,"nodeType":"108","messageId":"109","endLine":3,"endColumn":12},{"ruleId":"106","severity":1,"message":"110","line":8,"column":8,"nodeType":"108","messageId":"109","endLine":8,"endColumn":20},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'requestId'. Either include it or remove the dependency array.","ArrayExpression",["113"],["111"],["112"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["111"],["112"],["111"],["112"],["114"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'EmailPreview' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},{"desc":"115","fix":"117"},"Update the dependencies array to be: [requestId]",{"range":"118","text":"119"},{"range":"120","text":"119"},[1226,1228],"[requestId]",[1411,1413]]