[{"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/index.js":"1","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/reportWebVitals.js":"2","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/medication/Medication_TEMP.js":"3","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/alerts/AlertsPage.js":"4","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/config.js":"5","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/App.js":"6","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Dashboard/Dashboard.jsx":"7","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/medication/MedicationForm.js":"8","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailSetDate.js":"9","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailPage.js":"10","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailReadyForCollection.js":"11","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/shared/FileUploadBtn.js":"12","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/ResidentsList.js":"13","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/shared/tooltip/ParentTooltip.js":"14","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/Residentprofile.js":"15","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/pharmacy/PharmacyPage.js":"16","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailInquiry.js":"17","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/shared/Timeline.js":"18","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/medication/MedicationDose.js":"19","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/AddResidentForm.js":"20","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/ResidentPreview.js":"21","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/helper/convertTimestampToDate.js":"22"},{"size":595,"mtime":1614606779373,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1609075878890,"results":"25","hashOfConfig":"24"},{"size":682,"mtime":1614606779375,"results":"26","hashOfConfig":"24"},{"size":4458,"mtime":1614176632536,"results":"27","hashOfConfig":"24"},{"size":114,"mtime":1614176632536,"results":"28","hashOfConfig":"24"},{"size":7226,"mtime":1614606779363,"results":"29","hashOfConfig":"24"},{"size":4728,"mtime":1614624332956,"results":"30","hashOfConfig":"24"},{"size":5148,"mtime":1614606779375,"results":"31","hashOfConfig":"24"},{"size":3274,"mtime":1614176632549,"results":"32","hashOfConfig":"24"},{"size":3969,"mtime":1614606779371,"results":"33","hashOfConfig":"24"},{"size":2212,"mtime":1614606779372,"results":"34","hashOfConfig":"24"},{"size":898,"mtime":1614606779380,"results":"35","hashOfConfig":"24"},{"size":3682,"mtime":1614176632542,"results":"36","hashOfConfig":"24"},{"size":1503,"mtime":1614606779381,"results":"37","hashOfConfig":"24"},{"size":4728,"mtime":1614606779379,"results":"38","hashOfConfig":"24"},{"size":1685,"mtime":1614606779376,"results":"39","hashOfConfig":"24"},{"size":2712,"mtime":1609076484681,"results":"40","hashOfConfig":"24"},{"size":5032,"mtime":1614606779380,"results":"41","hashOfConfig":"24"},{"size":2484,"mtime":1614176632538,"results":"42","hashOfConfig":"24"},{"size":3297,"mtime":1614176632540,"results":"43","hashOfConfig":"24"},{"size":1900,"mtime":1614176632541,"results":"44","hashOfConfig":"24"},{"size":293,"mtime":1609076484683,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tbvtix",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"53"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/index.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/reportWebVitals.js",[],["101","102"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/medication/Medication_TEMP.js",[],["103","104"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/alerts/AlertsPage.js",[],["105","106"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/config.js",[],["107","108"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/App.js",["109","110","111","112","113"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Dashboard/Dashboard.jsx",["114","115"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/medication/MedicationForm.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailSetDate.js",["116"],"import React, {useEffect, useState} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport FullPageCentered from \"../shared/FullPageCentered\";\nimport List from \"../shared/List\";\nimport {backendUrl} from \"../config\";\nimport {convertToYYYYMMDD} from \"../helper/convertTimestampToDate\";\n\nconst EmailSetDate = (props) => {\n    const [readyDate, setReadyDate] = useState(\"\");\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [careHomeName, setCareHomeName] = useState(\"-\");\n    const [residentName, setResidentName] = useState(\"-\");\n    const [medication, setMedication] = useState(\"-\");\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\n\n    //method to get the details of the medication from the database once the page loads\n    useEffect(() => {\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\n            .then(r => r.json())\n            .then(resp => {\n                console.log(resp);\n                setCareHomeName(resp.careHomeName || \"-\");\n                setResidentName(resp.residentName || \"-\");\n                setMedication(resp.medicationName || \"-\");\n                if (resp.dateMedicationToBeReady) { //if date is not set don't change default value\n                    setReadyDate(convertToYYYYMMDD(resp.dateMedicationToBeReady));\n                }\n            })\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\n\n\n    const submit = e => {\n        e.preventDefault();\n        console.log({readyDate, requestId});\n        fetch(`${backendUrl}/email/accept`, {\n            method: \"POST\",\n            body: JSON.stringify({readyDate, requestId}),\n            headers: {\"Content-Type\": \"application/json\"}\n        })\n            .then(response => response.json())\n            .then(r => {\n                console.log(r);\n                setIsSubmitted(true);\n            })\n            .catch(e => console.log(e));\n    }\n\n    //getting todays date so we can set the earliest date the medication is ready to today - i.e. the pharmacist cannot pick a past date\n    let now = new Date();\n    let today = now.getFullYear() + \"-\" + (now.getMonth() + 1) + \"-\" + now.getDate();\n\n    let inquiryDetails = {\n        \"Care Home\": careHomeName, Resident: residentName, Medication: medication\n    }\n\n    if (!isSubmitted) {\n        return (\n            <FullPageCentered background={\"#ccf6c8\"}>\n                <h2>Processing Medication</h2>\n                <List items={inquiryDetails}>\n                    <p>Date ready for collection:</p>\n                    <input type={\"date\"} min={today} onChange={e => setReadyDate(e.target.value)} value={readyDate}/>\n                </List>\n                <Button variant=\"primary\" onClick={e => submit(e)}>\n                    Let the care home know!\n                </Button>\n            </FullPageCentered>\n        );\n    } else {\n        return (\n            <FullPageCentered>\n                <h3>Confirmation sent to the care home that they can pick up the medication on:</h3>\n                <h3>{readyDate}</h3>\n            </FullPageCentered>\n        )\n    }\n}\n\nexport default EmailSetDate;\n",["117","118"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailPage.js",["119","120"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailReadyForCollection.js",["121","122","123","124","125","126"],"import React, {useEffect, useState} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport {backendUrl} from \"../config\";\nimport FullPageCentered from \"../shared/FullPageCentered\";\nimport List from \"../shared/List\";\nimport Quote from \"../shared/Quote\";\n\nconst EmailReadyForCollection = (props) => {\n    const [comment, setComment] = useState(\"\");\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [careHomeName, setCareHomeName] = useState(\"-\");\n    const [residentName, setResidentName] = useState(\"-\");\n    const [medication, setMedication] = useState(\"-\");\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\n\n    //method to get the details of the medication from the database once the page loads\n    useEffect(() => {\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\n            .then(r => r.json())\n            .then(resp => {\n                console.log(resp);\n                setCareHomeName(resp.careHomeName || \"-\");\n                setResidentName(resp.residentName || \"-\");\n                setMedication(resp.medicationName || \"-\");\n                setComment(resp.pharmacyComment || \"\");\n            })\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\n\n    const submit = e => {\n        if (e) e.preventDefault();\n        fetch(`${backendUrl}/email/ready-for-collection`, {method: \"POST\", body: JSON.stringify({comment,requestId}), headers: {\"Content-Type\": \"application/json\"}})\n            .then(response => response.json())\n            .then(r => {\n                console.log(r)\n                setIsSubmitted(true);\n            })\n            .catch(e => console.log(e));\n    }\n\n    let inquiryDetails = {\n        \"Care Home\": careHomeName,\n        Resident: residentName,\n        Medication: medication\n    }\n\n    //automatically submitting.\n    submit();\n\n    return (\n        <FullPageCentered>\n            <h3>{careHomeName} will be notified that {medication} is ready to collect now!</h3>\n        </FullPageCentered>\n    )\n}\n\nexport default EmailReadyForCollection;\n","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/shared/FileUploadBtn.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/ResidentsList.js",["127"],"import React from 'react';\nimport TitleBar from \"../shared/TitleBar\";\nimport Button from \"react-bootstrap/Button\";\nimport { backendUrl } from \"../config\";\n\n//import \"./PharmacyPage.css\";\nimport AddResidentForm from \"./AddResidentForm\";\nimport ResidentPreview from './ResidentPreview';\nimport Residentprofile from \"./Residentprofile\";\n// import Residentprofile from './Residentprofile';\n\nclass ResidentsList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {residents: [], showForm: false };\n    }\n\n    componentDidMount() {\n        this.getDataFromDb();\n    }\n\n    getDataFromDb() {\n        fetch(`${backendUrl}/resident/all?careHomeId=0`)\n            .then(response => response.json())\n            .then(response => {\n                console.log(response)\n                if (!response.status || response.status === 200) {\n                    this.setState({residents: response})\n                }\n            })\n    }\n\n    handleSubmission() {\n        fetch(`${backendUrl}/resident`, {method: \"POST\", body: \"\", headers: {\"Content-Type\": \"application/json\"}})\n            .then(response => this.getDataFromDb());\n        this.setState({showForm: false})\n        window.location.reload(false);\n    }\n\n    render() {\n        let id = window.location.pathname.split(\"/\")[2];\n        console.log(id)\n\n        const {residents, showForm} = this.state;\n\n        console.log(this.state.residents, this.state.residents.length)\n\n        if (id) {\n            //need to go through all residents and find the one with this ID\n            const resident = this.state.residents.filter(x => x.residentId == id)[0]\n            if (resident) {\n                const {residentId, bio, age, guardName, firstName, surName, archived} = resident;\n                return (\n                    <Residentprofile\n                        resId={residentId}\n                        bio={bio}\n                        age={age}\n                        guardName={guardName}\n                        firstName={firstName}\n                        surName={surName}\n                        archived={archived}/>\n                )\n            }\n        }\n\n        //we don't add else here. designed so that if the ID isn't a resident, we still display the list.\n        let residentPreviews = residents.map((resident,idx) =>\n            <ResidentPreview handleSubmission={() => this.handleSubmission()}\n                                                archived={resident.archived} \n                                                firstName={resident.firstName} \n                                                surName={resident.surName}\n                                                resId={resident.residentId}\n                                                bio={resident.bio}\n                                                age={resident.age} \n                                                guardName={resident.guardianName}\n                                                key={idx} />\n        );\n        \n        \n        return (\n            <main>\n                <TitleBar title={\"My Residents\"}>\n                    <Button variant=\"primary\" onClick={() => this.setState({showForm: true})}>Add new</Button>\n                </TitleBar>\n                <div className={\"list\"}>\n                    {residentPreviews}\n                </div>\n                {showForm && <AddResidentForm\n                    show={showForm}\n                    handleClose={() => this.setState({showForm: false})} \n                    handleSubmission={() => this.handleSubmission()}\n                />}\n            </main>\n        );\n    }\n    \n}\n    export default ResidentsList;\n",["128","129"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/shared/tooltip/ParentTooltip.js",["130","131","132"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/Residentprofile.js",["133"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/pharmacy/PharmacyPage.js",["134","135"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailInquiry.js",["136"],"import React, {useEffect, useState} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport {backendUrl} from \"../config\";\nimport FullPageCentered from \"../shared/FullPageCentered\";\nimport List from \"../shared/List\";\nimport Quote from \"../shared/Quote\";\n\nconst EmailInquiry = (props) => {\n    const [comment, setComment] = useState(\"\");\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [careHomeName, setCareHomeName] = useState(\"-\");\n    const [residentName, setResidentName] = useState(\"-\");\n    const [medication, setMedication] = useState(\"-\");\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\n\n    //method to get the details of the medication from the database once the page loads\n    useEffect(() => {\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\n            .then(r => r.json())\n            .then(resp => {\n                console.log(resp);\n                setCareHomeName(resp.careHomeName || \"-\");\n                setResidentName(resp.residentName || \"-\");\n                setMedication(resp.medicationName || \"-\");\n                setComment(resp.pharmacyComment || \"\");\n            })\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\n\n    const submit = e => {\n        e.preventDefault();\n        fetch(`${backendUrl}/email/reject`, {method: \"POST\", body: JSON.stringify({comment,requestId}), headers: {\"Content-Type\": \"application/json\"}})\n            .then(response => response.json())\n            .then(r => {\n                console.log(r)\n                setIsSubmitted(true);\n            })\n            .catch(e => console.log(e));\n    }\n\n    let inquiryDetails = {\n        \"Care Home\": careHomeName,\n        Resident: residentName,\n        Medication: medication\n    }\n\n    if (!isSubmitted) {\n        return (\n            <FullPageCentered background={\"#f6d6ad\"} >\n                <h2>Inquiry needed</h2>\n                <List items={inquiryDetails}>\n                    <p>Inquiry comment</p>\n                    <textarea rows={4} onChange={e => setComment(e.target.value)} value={comment} />\n                </List>\n                <Button variant=\"primary\" onClick={e => submit(e)}>\n                    Let the care home know!\n                </Button>\n            </FullPageCentered>\n        );\n    } else {\n        return (\n            <FullPageCentered>\n                <h3>Inquiry submitted to the care home with the comment:</h3>\n                <Quote quote={comment} />\n            </FullPageCentered>\n        )\n    }\n}\n\nexport default EmailInquiry;\n",["137","138"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/shared/Timeline.js",["139","140","141","142"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/medication/MedicationDose.js",["143","144"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/AddResidentForm.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/ResidentPreview.js",["145","146","147","148","149"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/helper/convertTimestampToDate.js",[],{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","replacedBy":"153"},{"ruleId":"150","replacedBy":"154"},{"ruleId":"152","replacedBy":"155"},{"ruleId":"150","replacedBy":"156"},{"ruleId":"152","replacedBy":"157"},{"ruleId":"150","replacedBy":"158"},{"ruleId":"152","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":16,"column":8,"nodeType":"162","messageId":"163","endLine":16,"endColumn":21},{"ruleId":"160","severity":1,"message":"164","line":25,"column":8,"nodeType":"162","messageId":"163","endLine":25,"endColumn":23},{"ruleId":"160","severity":1,"message":"165","line":78,"column":11,"nodeType":"162","messageId":"163","endLine":78,"endColumn":31},{"ruleId":"160","severity":1,"message":"166","line":142,"column":11,"nodeType":"162","messageId":"163","endLine":142,"endColumn":28},{"ruleId":"167","severity":1,"message":"168","line":183,"column":15,"nodeType":"169","endLine":183,"endColumn":69},{"ruleId":"160","severity":1,"message":"170","line":1,"column":17,"nodeType":"162","messageId":"163","endLine":1,"endColumn":26},{"ruleId":"160","severity":1,"message":"171","line":20,"column":9,"nodeType":"162","messageId":"163","endLine":20,"endColumn":25},{"ruleId":"172","severity":1,"message":"173","line":29,"column":8,"nodeType":"174","endLine":29,"endColumn":10,"suggestions":"175"},{"ruleId":"150","replacedBy":"176"},{"ruleId":"152","replacedBy":"177"},{"ruleId":"178","severity":1,"message":"179","line":59,"column":58,"nodeType":"180","messageId":"181","endLine":59,"endColumn":60},{"ruleId":"178","severity":1,"message":"179","line":59,"column":79,"nodeType":"180","messageId":"181","endLine":59,"endColumn":81},{"ruleId":"160","severity":1,"message":"182","line":2,"column":8,"nodeType":"162","messageId":"163","endLine":2,"endColumn":14},{"ruleId":"160","severity":1,"message":"183","line":5,"column":8,"nodeType":"162","messageId":"163","endLine":5,"endColumn":12},{"ruleId":"160","severity":1,"message":"184","line":6,"column":8,"nodeType":"162","messageId":"163","endLine":6,"endColumn":13},{"ruleId":"160","severity":1,"message":"185","line":10,"column":12,"nodeType":"162","messageId":"163","endLine":10,"endColumn":23},{"ruleId":"172","severity":1,"message":"173","line":27,"column":8,"nodeType":"174","endLine":27,"endColumn":10,"suggestions":"186"},{"ruleId":"160","severity":1,"message":"187","line":40,"column":9,"nodeType":"162","messageId":"163","endLine":40,"endColumn":23},{"ruleId":"178","severity":1,"message":"179","line":50,"column":76,"nodeType":"180","messageId":"181","endLine":50,"endColumn":78},{"ruleId":"150","replacedBy":"188"},{"ruleId":"152","replacedBy":"189"},{"ruleId":"160","severity":1,"message":"190","line":1,"column":16,"nodeType":"162","messageId":"163","endLine":1,"endColumn":25},{"ruleId":"160","severity":1,"message":"191","line":1,"column":27,"nodeType":"162","messageId":"163","endLine":1,"endColumn":35},{"ruleId":"160","severity":1,"message":"192","line":2,"column":8,"nodeType":"162","messageId":"163","endLine":2,"endColumn":18},{"ruleId":"172","severity":1,"message":"193","line":25,"column":8,"nodeType":"174","endLine":25,"endColumn":10,"suggestions":"194"},{"ruleId":"160","severity":1,"message":"195","line":9,"column":9,"nodeType":"162","messageId":"163","endLine":9,"endColumn":19},{"ruleId":"160","severity":1,"message":"196","line":18,"column":26,"nodeType":"162","messageId":"163","endLine":18,"endColumn":36},{"ruleId":"172","severity":1,"message":"173","line":27,"column":8,"nodeType":"174","endLine":27,"endColumn":10,"suggestions":"197"},{"ruleId":"150","replacedBy":"198"},{"ruleId":"152","replacedBy":"199"},{"ruleId":"160","severity":1,"message":"200","line":6,"column":8,"nodeType":"162","messageId":"163","endLine":6,"endColumn":16},{"ruleId":"172","severity":1,"message":"201","line":43,"column":8,"nodeType":"174","endLine":43,"endColumn":10,"suggestions":"202"},{"ruleId":"172","severity":1,"message":"203","line":47,"column":8,"nodeType":"174","endLine":47,"endColumn":17,"suggestions":"204"},{"ruleId":"160","severity":1,"message":"205","line":74,"column":13,"nodeType":"162","messageId":"163","endLine":74,"endColumn":22},{"ruleId":"160","severity":1,"message":"191","line":1,"column":16,"nodeType":"162","messageId":"163","endLine":1,"endColumn":24},{"ruleId":"160","severity":1,"message":"206","line":12,"column":11,"nodeType":"162","messageId":"163","endLine":12,"endColumn":16},{"ruleId":"160","severity":1,"message":"207","line":2,"column":35,"nodeType":"162","messageId":"163","endLine":2,"endColumn":41},{"ruleId":"160","severity":1,"message":"208","line":2,"column":43,"nodeType":"162","messageId":"163","endLine":2,"endColumn":48},{"ruleId":"160","severity":1,"message":"209","line":2,"column":50,"nodeType":"162","messageId":"163","endLine":2,"endColumn":54},{"ruleId":"160","severity":1,"message":"164","line":8,"column":8,"nodeType":"162","messageId":"163","endLine":8,"endColumn":23},{"ruleId":"160","severity":1,"message":"210","line":9,"column":8,"nodeType":"162","messageId":"163","endLine":9,"endColumn":19},"no-native-reassign",["211"],"no-negated-in-lhs",["212"],["211"],["212"],["211"],["212"],["211"],["212"],"no-unused-vars","'ParentTooltip' is defined but never used.","Identifier","unusedVar","'Residentprofile' is defined but never used.","'practiceTimelineData' is assigned a value but never used.","'medicationsAtTime' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component Medication_TEMP must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'Component' is defined but never used.","'handleMedication' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'requestId'. Either include it or remove the dependency array.","ArrayExpression",["213"],["211"],["212"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Button' is defined but never used.","'List' is defined but never used.","'Quote' is defined but never used.","'isSubmitted' is assigned a value but never used.",["214"],"'inquiryDetails' is assigned a value but never used.",["211"],["212"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'MedTooltip' is defined but never used.","React Hook useEffect has missing dependencies: 'getResDosages' and 'getResImg'. Either include them or remove the dependency array.",["215"],"'backendUrl' is defined but never used.","'careHomeId' is assigned a value but never used.",["216"],["211"],["212"],"'ReactDOM' is defined but never used.","React Hook useEffect has a missing dependency: 'xScale'. Either include it or remove the dependency array.",["217"],"React Hook useEffect has a missing dependency: 'draw'. Either include it or remove the dependency array.",["218"],"'selection' is assigned a value but never used.","'times' is assigned a value but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'ArchResProf' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"219","fix":"220"},{"desc":"219","fix":"221"},{"desc":"222","fix":"223"},{"desc":"219","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},"Update the dependencies array to be: [requestId]",{"range":"229","text":"230"},{"range":"231","text":"230"},"Update the dependencies array to be: [getResDosages, getResImg]",{"range":"232","text":"233"},{"range":"234","text":"230"},"Update the dependencies array to be: [xScale]",{"range":"235","text":"236"},"Update the dependencies array to be: [dosages, draw]",{"range":"237","text":"238"},[1406,1408],"[requestId]",[1237,1239],[768,770],"[getResDosages, getResImg]",[1226,1228],[1425,1427],"[xScale]",[1476,1485],"[dosages, draw]"]