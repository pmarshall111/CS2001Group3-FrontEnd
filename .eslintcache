[{"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailPage.js":"1","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailSetDate.js":"2","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailReadyForCollection.js":"3","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailStatusCategories.js":"4","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailInquiry.js":"5","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailPreview.js":"6","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/helper/dateHelper.js":"7","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/ShowEmailContent.js":"8","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/TitleBar.js":"9","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/App.js":"10","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/FullPageCentered.js":"11","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/helper/convertTimestampToDate.js":"12","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/Timeline.js":"13","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/reportWebVitals.js":"14","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/alerts/AlertItem.js":"15","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/config.js":"16","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/Quote.js":"17","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/pharmacy/AddPharmacyForm.js":"18","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/tooltip/MedTooltip.js":"19","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/tooltip/ParentTooltip.js":"20","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/tooltip/ResidentTooltip.js":"21","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/pharmacy/PharmacyPreview.js":"22","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/List.js":"23","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/pharmacy/PharmacyPage.js":"24","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/index.js":"25","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/alerts/AlertsPage.js":"26"},{"size":3750,"mtime":1612721259976,"results":"27","hashOfConfig":"28"},{"size":3274,"mtime":1610895199139,"results":"29","hashOfConfig":"28"},{"size":2212,"mtime":1610895258091,"results":"30","hashOfConfig":"28"},{"size":270,"mtime":1611504991220,"results":"31","hashOfConfig":"28"},{"size":2712,"mtime":1610894327474,"results":"32","hashOfConfig":"28"},{"size":3371,"mtime":1611505286138,"results":"33","hashOfConfig":"28"},{"size":400,"mtime":1612641765615,"results":"34","hashOfConfig":"28"},{"size":637,"mtime":1611502882682,"results":"35","hashOfConfig":"28"},{"size":377,"mtime":1606589657957,"results":"36","hashOfConfig":"28"},{"size":5453,"mtime":1613240697361,"results":"37","hashOfConfig":"28"},{"size":295,"mtime":1610894327478,"results":"38","hashOfConfig":"28"},{"size":293,"mtime":1610894327474,"results":"39","hashOfConfig":"28"},{"size":4954,"mtime":1613240663304,"results":"40","hashOfConfig":"28"},{"size":362,"mtime":1606578955284,"results":"41","hashOfConfig":"28"},{"size":669,"mtime":1610894327474,"results":"42","hashOfConfig":"28"},{"size":50,"mtime":1610894327474,"results":"43","hashOfConfig":"28"},{"size":184,"mtime":1610894327478,"results":"44","hashOfConfig":"28"},{"size":2842,"mtime":1610894327474,"results":"45","hashOfConfig":"28"},{"size":624,"mtime":1612641765615,"results":"46","hashOfConfig":"28"},{"size":1434,"mtime":1613240360177,"results":"47","hashOfConfig":"28"},{"size":1054,"mtime":1612641765619,"results":"48","hashOfConfig":"28"},{"size":664,"mtime":1610894327478,"results":"49","hashOfConfig":"28"},{"size":421,"mtime":1610894327478,"results":"50","hashOfConfig":"28"},{"size":1565,"mtime":1610894327474,"results":"51","hashOfConfig":"28"},{"size":500,"mtime":1606578955284,"results":"52","hashOfConfig":"28"},{"size":3920,"mtime":1612641765615,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},"7v4c1w",{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"65"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailPage.js",["116","117"],"import React from 'react';\n\nimport TitleBar from \"../shared/TitleBar\";\nimport Form from \"react-bootstrap/Form\";\n\nimport \"./EmailPage.css\";\n\nimport {backendUrl} from \"../config\";\nimport EmailPreview from \"./EmailPreview\";\n\nimport {READY, ASKED_IF_READY, SENT_INITIAL_EMAIL, PROCESSING, INQUIRY, COMPLETE} from \"./EmailStatusCategories\";\nimport ShowEmailContent from \"./ShowEmailContent\";\n\n\nclass EmailPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {emailType:\"All\", emails: [], emailHtml: \"\", showEmailHtml: \"\"};\n    }\n\n    componentDidMount() {\n        this.getDataFromDb();\n    }\n\n    getDataFromDb() {\n        fetch(`${backendUrl}/email?careHomeId=0`)\n            .then(response => response.text())\n            .then(response => {\n                console.log(JSON.parse(response))\n                this.setState({emails: JSON.parse(response)})\n            })\n    }\n\n    showEmailContent(nonGuessableId) {\n        fetch(`${backendUrl}/email/show-email-content?id=${nonGuessableId}`)\n            .then(response => response.text())\n            .then(response => {\n                this.setState({emailHtml: JSON.parse(response).emailHtml, showEmailHtml: true})\n            })\n    }\n\n    hideEmailContent() {\n        this.setState({showEmailHtml: false, emailHtml: \"\"})\n    }\n\n    render() {\n        let {emails, emailType} = this.state;\n        // emails = [\n        //     {residentName: \"Gerald Hornet\", medicationName:\"Paracetamol 20 tablets 25g\", pharmacyName:\"Croyden corner\", dateSent:\"02-12-20 12:34\", dateResponded: null, status:\"unresponded\"},\n        //     {residentName: \"Mary Whippersville\", medicationName:\"IbuProfen 20 tablets 25g\", pharmacyName:\"Croyden corner\", dateSent:\"02-12-20 12:34\", dateResponded: null, status:\"accepted\"},\n        //     {residentName: \"Guy from trainspotting\", medicationName:\"1kg heroin\", pharmacyName:\"Croyden corner\", dateSent:\"02-12-20 12:34\", dateResponded: null, status:\"rejected\"}\n        // ]\n        console.log(emails)\n        let emailPreviews = emails.filter(x => emailType == \"All\" || x.status == emailType)\n            .map((email,idx) =>\n            <EmailPreview resident={email.residentName} medication={email.medicationName} pharmacy={email.pharmacyEmail} dateLastEmailSent={email.dateLastEmailSent}\n                          dateResponded={email.dateUpdatedByPharmacy} dateMedicationToBeReady={email.dateMedicationToBeReady} inquiryComment={email.pharmacyComment}\n                          status={email.status} nonGuessableId={email.nonGuessableId} showEmailContent={() => this.showEmailContent(email.nonGuessableId)} key={idx} />\n        );\n\n        return (\n            <main>\n                <TitleBar title={\"Emails Sent\"}>\n                    <Form.Control as={\"select\"} custom onChange={(e) => {\n                        console.log(e)\n                        console.log(e.target.value.toLowerCase())\n                        this.setState({emailType: e.target.value})}\n                    } >\n                        <option>All</option>\n                        <option>{SENT_INITIAL_EMAIL}</option>\n                        <option>{PROCESSING}</option>\n                        <option>{INQUIRY}</option>\n                        <option>{ASKED_IF_READY}</option>\n                        <option>{READY}</option>\n                        <option>{COMPLETE}</option>\n                    </Form.Control>\n                </TitleBar>\n                <div className={\"list\"}>\n                    {emailPreviews}\n                </div>\n                <ShowEmailContent show={this.state.showEmailHtml} close={() => this.hideEmailContent()} emailHtml={this.state.emailHtml}/>\n            </main>\n        );\n    }\n}\n\nexport default EmailPage;\n",["118","119"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailSetDate.js",["120"],"import React, {useEffect, useState} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport FullPageCentered from \"../shared/FullPageCentered\";\nimport List from \"../shared/List\";\nimport {backendUrl} from \"../config\";\nimport {convertToYYYYMMDD} from \"../helper/convertTimestampToDate\";\n\nconst EmailSetDate = (props) => {\n    const [readyDate, setReadyDate] = useState(\"\");\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [careHomeName, setCareHomeName] = useState(\"-\");\n    const [residentName, setResidentName] = useState(\"-\");\n    const [medication, setMedication] = useState(\"-\");\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\n\n    //method to get the details of the medication from the database once the page loads\n    useEffect(() => {\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\n            .then(r => r.json())\n            .then(resp => {\n                console.log(resp);\n                setCareHomeName(resp.careHomeName || \"-\");\n                setResidentName(resp.residentName || \"-\");\n                setMedication(resp.medicationName || \"-\");\n                if (resp.dateMedicationToBeReady) { //if date is not set don't change default value\n                    setReadyDate(convertToYYYYMMDD(resp.dateMedicationToBeReady));\n                }\n            })\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\n\n\n    const submit = e => {\n        e.preventDefault();\n        console.log({readyDate, requestId});\n        fetch(`${backendUrl}/email/accept`, {\n            method: \"POST\",\n            body: JSON.stringify({readyDate, requestId}),\n            headers: {\"Content-Type\": \"application/json\"}\n        })\n            .then(response => response.json())\n            .then(r => {\n                console.log(r);\n                setIsSubmitted(true);\n            })\n            .catch(e => console.log(e));\n    }\n\n    //getting todays date so we can set the earliest date the medication is ready to today - i.e. the pharmacist cannot pick a past date\n    let now = new Date();\n    let today = now.getFullYear() + \"-\" + (now.getMonth() + 1) + \"-\" + now.getDate();\n\n    let inquiryDetails = {\n        \"Care Home\": careHomeName, Resident: residentName, Medication: medication\n    }\n\n    if (!isSubmitted) {\n        return (\n            <FullPageCentered background={\"#ccf6c8\"}>\n                <h2>Processing Medication</h2>\n                <List items={inquiryDetails}>\n                    <p>Date ready for collection:</p>\n                    <input type={\"date\"} min={today} onChange={e => setReadyDate(e.target.value)} value={readyDate}/>\n                </List>\n                <Button variant=\"primary\" onClick={e => submit(e)}>\n                    Let the care home know!\n                </Button>\n            </FullPageCentered>\n        );\n    } else {\n        return (\n            <FullPageCentered>\n                <h3>Confirmation sent to the care home that they can pick up the medication on:</h3>\n                <h3>{readyDate}</h3>\n            </FullPageCentered>\n        )\n    }\n}\n\nexport default EmailSetDate;\n",["121","122"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailReadyForCollection.js",["123","124","125","126","127","128"],"import React, {useEffect, useState} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport {backendUrl} from \"../config\";\nimport FullPageCentered from \"../shared/FullPageCentered\";\nimport List from \"../shared/List\";\nimport Quote from \"../shared/Quote\";\n\nconst EmailReadyForCollection = (props) => {\n    const [comment, setComment] = useState(\"\");\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [careHomeName, setCareHomeName] = useState(\"-\");\n    const [residentName, setResidentName] = useState(\"-\");\n    const [medication, setMedication] = useState(\"-\");\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\n\n    //method to get the details of the medication from the database once the page loads\n    useEffect(() => {\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\n            .then(r => r.json())\n            .then(resp => {\n                console.log(resp);\n                setCareHomeName(resp.careHomeName || \"-\");\n                setResidentName(resp.residentName || \"-\");\n                setMedication(resp.medicationName || \"-\");\n                setComment(resp.pharmacyComment || \"\");\n            })\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\n\n    const submit = e => {\n        if (e) e.preventDefault();\n        fetch(`${backendUrl}/email/ready-for-collection`, {method: \"POST\", body: JSON.stringify({comment,requestId}), headers: {\"Content-Type\": \"application/json\"}})\n            .then(response => response.json())\n            .then(r => {\n                console.log(r)\n                setIsSubmitted(true);\n            })\n            .catch(e => console.log(e));\n    }\n\n    let inquiryDetails = {\n        \"Care Home\": careHomeName,\n        Resident: residentName,\n        Medication: medication\n    }\n\n    //automatically submitting.\n    submit();\n\n    return (\n        <FullPageCentered>\n            <h3>{careHomeName} will be notified that {medication} is ready to collect now!</h3>\n        </FullPageCentered>\n    )\n}\n\nexport default EmailReadyForCollection;\n",["129","130"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailStatusCategories.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailInquiry.js",["131"],"import React, {useEffect, useState} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport {backendUrl} from \"../config\";\nimport FullPageCentered from \"../shared/FullPageCentered\";\nimport List from \"../shared/List\";\nimport Quote from \"../shared/Quote\";\n\nconst EmailInquiry = (props) => {\n    const [comment, setComment] = useState(\"\");\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [careHomeName, setCareHomeName] = useState(\"-\");\n    const [residentName, setResidentName] = useState(\"-\");\n    const [medication, setMedication] = useState(\"-\");\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\n\n    //method to get the details of the medication from the database once the page loads\n    useEffect(() => {\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\n            .then(r => r.json())\n            .then(resp => {\n                console.log(resp);\n                setCareHomeName(resp.careHomeName || \"-\");\n                setResidentName(resp.residentName || \"-\");\n                setMedication(resp.medicationName || \"-\");\n                setComment(resp.pharmacyComment || \"\");\n            })\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\n\n    const submit = e => {\n        e.preventDefault();\n        fetch(`${backendUrl}/email/reject`, {method: \"POST\", body: JSON.stringify({comment,requestId}), headers: {\"Content-Type\": \"application/json\"}})\n            .then(response => response.json())\n            .then(r => {\n                console.log(r)\n                setIsSubmitted(true);\n            })\n            .catch(e => console.log(e));\n    }\n\n    let inquiryDetails = {\n        \"Care Home\": careHomeName,\n        Resident: residentName,\n        Medication: medication\n    }\n\n    if (!isSubmitted) {\n        return (\n            <FullPageCentered background={\"#f6d6ad\"} >\n                <h2>Inquiry needed</h2>\n                <List items={inquiryDetails}>\n                    <p>Inquiry comment</p>\n                    <textarea rows={4} onChange={e => setComment(e.target.value)} value={comment} />\n                </List>\n                <Button variant=\"primary\" onClick={e => submit(e)}>\n                    Let the care home know!\n                </Button>\n            </FullPageCentered>\n        );\n    } else {\n        return (\n            <FullPageCentered>\n                <h3>Inquiry submitted to the care home with the comment:</h3>\n                <Quote quote={comment} />\n            </FullPageCentered>\n        )\n    }\n}\n\nexport default EmailInquiry;\n",["132","133"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailPreview.js",["134"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/helper/dateHelper.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/ShowEmailContent.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/TitleBar.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/App.js",["135","136","137"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/FullPageCentered.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/helper/convertTimestampToDate.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/Timeline.js",["138","139","140","141","142","143"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/reportWebVitals.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/alerts/AlertItem.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/config.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/Quote.js",[],["144","145"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/pharmacy/AddPharmacyForm.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/tooltip/MedTooltip.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/tooltip/ParentTooltip.js",["146","147","148"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/tooltip/ResidentTooltip.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/pharmacy/PharmacyPreview.js",["149"],"import React from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport {EnvelopeFill, HouseFill, TelephoneFill} from \"react-bootstrap-icons\";\n\nimport \"./PharmacyPreview.css\";\n\nconst PharmacyPreview = (props) => (\n    <div className={`pharm-container`}>\n        <h4>{props.title}</h4>\n        <div className={\"icon-container\"}>\n                <TelephoneFill className={props.hasPhone ? \"completed\" : \"incomplete\"} />\n                <HouseFill className={props.hasAddress ? \"completed\" : \"incomplete\"} />\n                <EnvelopeFill className={props.hasEmail ? \"completed\" : \"incomplete\"} />\n        </div>\n    </div>\n);\n\nexport default PharmacyPreview;\n","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/List.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/pharmacy/PharmacyPage.js",["150","151"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/index.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/alerts/AlertsPage.js",[],{"ruleId":"152","severity":1,"message":"153","line":54,"column":58,"nodeType":"154","messageId":"155","endLine":54,"endColumn":60},{"ruleId":"152","severity":1,"message":"153","line":54,"column":79,"nodeType":"154","messageId":"155","endLine":54,"endColumn":81},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":29,"column":8,"nodeType":"162","endLine":29,"endColumn":10,"suggestions":"163"},{"ruleId":"156","replacedBy":"164"},{"ruleId":"158","replacedBy":"165"},{"ruleId":"166","severity":1,"message":"167","line":2,"column":8,"nodeType":"168","messageId":"169","endLine":2,"endColumn":14},{"ruleId":"166","severity":1,"message":"170","line":5,"column":8,"nodeType":"168","messageId":"169","endLine":5,"endColumn":12},{"ruleId":"166","severity":1,"message":"171","line":6,"column":8,"nodeType":"168","messageId":"169","endLine":6,"endColumn":13},{"ruleId":"166","severity":1,"message":"172","line":10,"column":12,"nodeType":"168","messageId":"169","endLine":10,"endColumn":23},{"ruleId":"160","severity":1,"message":"161","line":27,"column":8,"nodeType":"162","endLine":27,"endColumn":10,"suggestions":"173"},{"ruleId":"166","severity":1,"message":"174","line":40,"column":9,"nodeType":"168","messageId":"169","endLine":40,"endColumn":23},{"ruleId":"156","replacedBy":"175"},{"ruleId":"158","replacedBy":"176"},{"ruleId":"160","severity":1,"message":"161","line":27,"column":8,"nodeType":"162","endLine":27,"endColumn":10,"suggestions":"177"},{"ruleId":"156","replacedBy":"178"},{"ruleId":"158","replacedBy":"179"},{"ruleId":"166","severity":1,"message":"180","line":1,"column":16,"nodeType":"168","messageId":"169","endLine":1,"endColumn":24},{"ruleId":"166","severity":1,"message":"181","line":15,"column":8,"nodeType":"168","messageId":"169","endLine":15,"endColumn":21},{"ruleId":"166","severity":1,"message":"182","line":59,"column":15,"nodeType":"168","messageId":"169","endLine":59,"endColumn":35},{"ruleId":"166","severity":1,"message":"183","line":78,"column":15,"nodeType":"168","messageId":"169","endLine":78,"endColumn":32},{"ruleId":"166","severity":1,"message":"184","line":6,"column":8,"nodeType":"168","messageId":"169","endLine":6,"endColumn":16},{"ruleId":"166","severity":1,"message":"185","line":21,"column":12,"nodeType":"168","messageId":"169","endLine":21,"endColumn":22},{"ruleId":"166","severity":1,"message":"186","line":21,"column":24,"nodeType":"168","messageId":"169","endLine":21,"endColumn":37},{"ruleId":"160","severity":1,"message":"187","line":44,"column":8,"nodeType":"162","endLine":44,"endColumn":10,"suggestions":"188"},{"ruleId":"160","severity":1,"message":"189","line":48,"column":8,"nodeType":"162","endLine":48,"endColumn":17,"suggestions":"190"},{"ruleId":"166","severity":1,"message":"191","line":75,"column":13,"nodeType":"168","messageId":"169","endLine":75,"endColumn":22},{"ruleId":"156","replacedBy":"192"},{"ruleId":"158","replacedBy":"193"},{"ruleId":"166","severity":1,"message":"194","line":1,"column":16,"nodeType":"168","messageId":"169","endLine":1,"endColumn":25},{"ruleId":"166","severity":1,"message":"180","line":1,"column":27,"nodeType":"168","messageId":"169","endLine":1,"endColumn":35},{"ruleId":"166","severity":1,"message":"195","line":2,"column":8,"nodeType":"168","messageId":"169","endLine":2,"endColumn":18},{"ruleId":"166","severity":1,"message":"167","line":2,"column":8,"nodeType":"168","messageId":"169","endLine":2,"endColumn":14},{"ruleId":"166","severity":1,"message":"196","line":9,"column":9,"nodeType":"168","messageId":"169","endLine":9,"endColumn":19},{"ruleId":"166","severity":1,"message":"197","line":18,"column":26,"nodeType":"168","messageId":"169","endLine":18,"endColumn":36},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["198"],"no-negated-in-lhs",["199"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'requestId'. Either include it or remove the dependency array.","ArrayExpression",["200"],["198"],["199"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'List' is defined but never used.","'Quote' is defined but never used.","'isSubmitted' is assigned a value but never used.",["201"],"'inquiryDetails' is assigned a value but never used.",["198"],["199"],["202"],["198"],["199"],"'useState' is defined but never used.","'ParentTooltip' is defined but never used.","'practiceTimelineData' is assigned a value but never used.","'medicationsAtTime' is assigned a value but never used.","'ReactDOM' is defined but never used.","'timeoutIds' is assigned a value but never used.","'setTimeoutIds' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'xScale'. Either include it or remove the dependency array.",["203"],"React Hook useEffect has a missing dependency: 'draw'. Either include it or remove the dependency array.",["204"],"'selection' is assigned a value but never used.",["198"],["199"],"'useEffect' is defined but never used.","'MedTooltip' is defined but never used.","'backendUrl' is defined but never used.","'careHomeId' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"205","fix":"206"},{"desc":"205","fix":"207"},{"desc":"205","fix":"208"},{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},"Update the dependencies array to be: [requestId]",{"range":"213","text":"214"},{"range":"215","text":"214"},{"range":"216","text":"214"},"Update the dependencies array to be: [xScale]",{"range":"217","text":"218"},"Update the dependencies array to be: [dosages, draw]",{"range":"219","text":"220"},[1406,1408],"[requestId]",[1237,1239],[1226,1228],[1480,1482],"[xScale]",[1531,1540],"[dosages, draw]"]