[{"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/index.js":"1","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/reportWebVitals.js":"2","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/medication/Medication_TEMP.js":"3","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/alerts/AlertsPage.js":"4","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/config.js":"5","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/App.js":"6","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Dashboard/Dashboard.jsx":"7","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/medication/MedicationForm.js":"8","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailSetDate.js":"9","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailPage.js":"10","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailReadyForCollection.js":"11","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/shared/FileUploadBtn.js":"12","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/ResidentsList.js":"13","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/shared/tooltip/ParentTooltip.js":"14","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/Residentprofile.js":"15","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/pharmacy/PharmacyPage.js":"16","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailInquiry.js":"17","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/shared/Timeline.js":"18","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/medication/MedicationDose.js":"19","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/AddResidentForm.js":"20","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/ResidentPreview.js":"21","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/helper/convertTimestampToDate.js":"22"},{"size":595,"mtime":1614275454523,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1609075878890,"results":"25","hashOfConfig":"24"},{"size":682,"mtime":1614176632539,"results":"26","hashOfConfig":"24"},{"size":4458,"mtime":1614176632536,"results":"27","hashOfConfig":"24"},{"size":114,"mtime":1614176632536,"results":"28","hashOfConfig":"24"},{"size":7226,"mtime":1614279426917,"results":"29","hashOfConfig":"24"},{"size":4416,"mtime":1614279291206,"results":"30","hashOfConfig":"24"},{"size":5148,"mtime":1614176632539,"results":"31","hashOfConfig":"24"},{"size":3274,"mtime":1614176632549,"results":"32","hashOfConfig":"24"},{"size":3969,"mtime":1614176632536,"results":"33","hashOfConfig":"24"},{"size":2212,"mtime":1614176632537,"results":"34","hashOfConfig":"24"},{"size":898,"mtime":1614176632542,"results":"35","hashOfConfig":"24"},{"size":3682,"mtime":1614176632542,"results":"36","hashOfConfig":"24"},{"size":1503,"mtime":1614176632543,"results":"37","hashOfConfig":"24"},{"size":4728,"mtime":1614176632542,"results":"38","hashOfConfig":"24"},{"size":1685,"mtime":1614176632540,"results":"39","hashOfConfig":"24"},{"size":2712,"mtime":1609076484681,"results":"40","hashOfConfig":"24"},{"size":5032,"mtime":1614176632542,"results":"41","hashOfConfig":"24"},{"size":2484,"mtime":1614176632538,"results":"42","hashOfConfig":"24"},{"size":3297,"mtime":1614176632540,"results":"43","hashOfConfig":"24"},{"size":1900,"mtime":1614176632541,"results":"44","hashOfConfig":"24"},{"size":293,"mtime":1609076484683,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1tbvtix",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"82"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"48"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"48"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/index.js",[],["108","109"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/reportWebVitals.js",[],["110","111"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/medication/Medication_TEMP.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/alerts/AlertsPage.js",[],["112","113"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/config.js",[],["114","115"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/App.js",["116","117","118","119","120"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/Dashboard/Dashboard.jsx",["121","122","123"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/medication/MedicationForm.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailSetDate.js",["124"],"import React, {useEffect, useState} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport FullPageCentered from \"../shared/FullPageCentered\";\nimport List from \"../shared/List\";\nimport {backendUrl} from \"../config\";\nimport {convertToYYYYMMDD} from \"../helper/convertTimestampToDate\";\n\nconst EmailSetDate = (props) => {\n    const [readyDate, setReadyDate] = useState(\"\");\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [careHomeName, setCareHomeName] = useState(\"-\");\n    const [residentName, setResidentName] = useState(\"-\");\n    const [medication, setMedication] = useState(\"-\");\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\n\n    //method to get the details of the medication from the database once the page loads\n    useEffect(() => {\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\n            .then(r => r.json())\n            .then(resp => {\n                console.log(resp);\n                setCareHomeName(resp.careHomeName || \"-\");\n                setResidentName(resp.residentName || \"-\");\n                setMedication(resp.medicationName || \"-\");\n                if (resp.dateMedicationToBeReady) { //if date is not set don't change default value\n                    setReadyDate(convertToYYYYMMDD(resp.dateMedicationToBeReady));\n                }\n            })\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\n\n\n    const submit = e => {\n        e.preventDefault();\n        console.log({readyDate, requestId});\n        fetch(`${backendUrl}/email/accept`, {\n            method: \"POST\",\n            body: JSON.stringify({readyDate, requestId}),\n            headers: {\"Content-Type\": \"application/json\"}\n        })\n            .then(response => response.json())\n            .then(r => {\n                console.log(r);\n                setIsSubmitted(true);\n            })\n            .catch(e => console.log(e));\n    }\n\n    //getting todays date so we can set the earliest date the medication is ready to today - i.e. the pharmacist cannot pick a past date\n    let now = new Date();\n    let today = now.getFullYear() + \"-\" + (now.getMonth() + 1) + \"-\" + now.getDate();\n\n    let inquiryDetails = {\n        \"Care Home\": careHomeName, Resident: residentName, Medication: medication\n    }\n\n    if (!isSubmitted) {\n        return (\n            <FullPageCentered background={\"#ccf6c8\"}>\n                <h2>Processing Medication</h2>\n                <List items={inquiryDetails}>\n                    <p>Date ready for collection:</p>\n                    <input type={\"date\"} min={today} onChange={e => setReadyDate(e.target.value)} value={readyDate}/>\n                </List>\n                <Button variant=\"primary\" onClick={e => submit(e)}>\n                    Let the care home know!\n                </Button>\n            </FullPageCentered>\n        );\n    } else {\n        return (\n            <FullPageCentered>\n                <h3>Confirmation sent to the care home that they can pick up the medication on:</h3>\n                <h3>{readyDate}</h3>\n            </FullPageCentered>\n        )\n    }\n}\n\nexport default EmailSetDate;\n",["125","126"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailPage.js",["127","128"],"import React from 'react';\n\nimport TitleBar from \"../shared/TitleBar\";\nimport Form from \"react-bootstrap/Form\";\n\nimport \"./EmailPage.css\";\n\nimport {backendUrl} from \"../config\";\nimport EmailPreview from \"./EmailPreview\";\n\nimport {READY, ASKED_IF_READY, SENT_INITIAL_EMAIL, PROCESSING, INQUIRY, COMPLETE} from \"./EmailStatusCategories\";\nimport ShowEmailContent from \"./ShowEmailContent\";\n\n\nclass EmailPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {emailType:\"All\", emails: [], emailHtml: \"\", showEmailHtml: \"\", intervalId: -1};\n    }\n\n    componentDidMount() {\n        this.getDataFromDb();\n        this.setState({intervalId: setInterval(() => this.getDataFromDb(), 30000)}) //check email state every 30 seconds\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.state.intervalId);\n    }\n\n    getDataFromDb() {\n        fetch(`${backendUrl}/email?careHomeId=0`)\n            .then(response => response.text())\n            .then(response => {\n                console.log(JSON.parse(response))\n                this.setState({emails: JSON.parse(response)})\n            })\n    }\n\n    showEmailContent(nonGuessableId) {\n        fetch(`${backendUrl}/email/show-email-content?id=${nonGuessableId}`)\n            .then(response => response.text())\n            .then(response => {\n                this.setState({emailHtml: JSON.parse(response).emailHtml, showEmailHtml: true})\n            })\n    }\n\n    hideEmailContent() {\n        this.setState({showEmailHtml: false, emailHtml: \"\"})\n    }\n\n    render() {\n        let {emails, emailType} = this.state;\n        // emails = [\n        //     {residentName: \"Gerald Hornet\", medicationName:\"Paracetamol 20 tablets 25g\", pharmacyName:\"Croyden corner\", dateSent:\"02-12-20 12:34\", dateResponded: null, status:\"unresponded\"},\n        //     {residentName: \"Mary Whippersville\", medicationName:\"IbuProfen 20 tablets 25g\", pharmacyName:\"Croyden corner\", dateSent:\"02-12-20 12:34\", dateResponded: null, status:\"accepted\"},\n        //     {residentName: \"Guy from trainspotting\", medicationName:\"1kg heroin\", pharmacyName:\"Croyden corner\", dateSent:\"02-12-20 12:34\", dateResponded: null, status:\"rejected\"}\n        // ]\n        console.log(emails)\n        let emailPreviews = emails.filter(x => emailType == \"All\" || x.status == emailType)\n            .map((email,idx) =>\n            <EmailPreview resident={email.residentName} medication={email.medicationName} pharmacy={email.pharmacyEmail} dateLastEmailSent={email.dateLastEmailSent}\n                          dateResponded={email.dateUpdatedByPharmacy} dateMedicationToBeReady={email.dateMedicationToBeReady} inquiryComment={email.pharmacyComment}\n                          status={email.status} nonGuessableId={email.nonGuessableId} showEmailContent={() => this.showEmailContent(email.nonGuessableId)} key={idx} />\n        );\n\n        return (\n            <main>\n                <TitleBar title={\"Emails Sent\"}>\n                    <Form.Control as={\"select\"} custom onChange={(e) => {\n                        console.log(e)\n                        console.log(e.target.value.toLowerCase())\n                        this.setState({emailType: e.target.value})}\n                    } >\n                        <option>All</option>\n                        <option>{SENT_INITIAL_EMAIL}</option>\n                        <option>{PROCESSING}</option>\n                        <option>{INQUIRY}</option>\n                        <option>{ASKED_IF_READY}</option>\n                        <option>{READY}</option>\n                        <option>{COMPLETE}</option>\n                    </Form.Control>\n                </TitleBar>\n                <div className={\"list\"}>\n                    {emailPreviews}\n                </div>\n                <ShowEmailContent show={this.state.showEmailHtml} close={() => this.hideEmailContent()} emailHtml={this.state.emailHtml}/>\n            </main>\n        );\n    }\n}\n\nexport default EmailPage;\n",["129","130"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailReadyForCollection.js",["131","132","133","134","135","136"],"import React, {useEffect, useState} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport {backendUrl} from \"../config\";\nimport FullPageCentered from \"../shared/FullPageCentered\";\nimport List from \"../shared/List\";\nimport Quote from \"../shared/Quote\";\n\nconst EmailReadyForCollection = (props) => {\n    const [comment, setComment] = useState(\"\");\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [careHomeName, setCareHomeName] = useState(\"-\");\n    const [residentName, setResidentName] = useState(\"-\");\n    const [medication, setMedication] = useState(\"-\");\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\n\n    //method to get the details of the medication from the database once the page loads\n    useEffect(() => {\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\n            .then(r => r.json())\n            .then(resp => {\n                console.log(resp);\n                setCareHomeName(resp.careHomeName || \"-\");\n                setResidentName(resp.residentName || \"-\");\n                setMedication(resp.medicationName || \"-\");\n                setComment(resp.pharmacyComment || \"\");\n            })\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\n\n    const submit = e => {\n        if (e) e.preventDefault();\n        fetch(`${backendUrl}/email/ready-for-collection`, {method: \"POST\", body: JSON.stringify({comment,requestId}), headers: {\"Content-Type\": \"application/json\"}})\n            .then(response => response.json())\n            .then(r => {\n                console.log(r)\n                setIsSubmitted(true);\n            })\n            .catch(e => console.log(e));\n    }\n\n    let inquiryDetails = {\n        \"Care Home\": careHomeName,\n        Resident: residentName,\n        Medication: medication\n    }\n\n    //automatically submitting.\n    submit();\n\n    return (\n        <FullPageCentered>\n            <h3>{careHomeName} will be notified that {medication} is ready to collect now!</h3>\n        </FullPageCentered>\n    )\n}\n\nexport default EmailReadyForCollection;\n","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/shared/FileUploadBtn.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/ResidentsList.js",["137"],"import React from 'react';\nimport TitleBar from \"../shared/TitleBar\";\nimport Button from \"react-bootstrap/Button\";\nimport { backendUrl } from \"../config\";\n\n//import \"./PharmacyPage.css\";\nimport AddResidentForm from \"./AddResidentForm\";\nimport ResidentPreview from './ResidentPreview';\nimport Residentprofile from \"./Residentprofile\";\n// import Residentprofile from './Residentprofile';\n\nclass ResidentsList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {residents: [], showForm: false };\n    }\n\n    componentDidMount() {\n        this.getDataFromDb();\n    }\n\n    getDataFromDb() {\n        fetch(`${backendUrl}/resident/all?careHomeId=0`)\n            .then(response => response.json())\n            .then(response => {\n                console.log(response)\n                if (!response.status || response.status === 200) {\n                    this.setState({residents: response})\n                }\n            })\n    }\n\n    handleSubmission() {\n        fetch(`${backendUrl}/resident`, {method: \"POST\", body: \"\", headers: {\"Content-Type\": \"application/json\"}})\n            .then(response => this.getDataFromDb());\n        this.setState({showForm: false})\n        window.location.reload(false);\n    }\n\n    render() {\n        let id = window.location.pathname.split(\"/\")[2];\n        console.log(id)\n\n        const {residents, showForm} = this.state;\n\n        console.log(this.state.residents, this.state.residents.length)\n\n        if (id) {\n            //need to go through all residents and find the one with this ID\n            const resident = this.state.residents.filter(x => x.residentId == id)[0]\n            if (resident) {\n                const {residentId, bio, age, guardName, firstName, surName, archived} = resident;\n                return (\n                    <Residentprofile\n                        resId={residentId}\n                        bio={bio}\n                        age={age}\n                        guardName={guardName}\n                        firstName={firstName}\n                        surName={surName}\n                        archived={archived}/>\n                )\n            }\n        }\n\n        //we don't add else here. designed so that if the ID isn't a resident, we still display the list.\n        let residentPreviews = residents.map((resident,idx) =>\n            <ResidentPreview handleSubmission={() => this.handleSubmission()}\n                                                archived={resident.archived} \n                                                firstName={resident.firstName} \n                                                surName={resident.surName}\n                                                resId={resident.residentId}\n                                                bio={resident.bio}\n                                                age={resident.age} \n                                                guardName={resident.guardianName}\n                                                key={idx} />\n        );\n        \n        \n        return (\n            <main>\n                <TitleBar title={\"My Residents\"}>\n                    <Button variant=\"primary\" onClick={() => this.setState({showForm: true})}>Add new</Button>\n                </TitleBar>\n                <div className={\"list\"}>\n                    {residentPreviews}\n                </div>\n                {showForm && <AddResidentForm\n                    show={showForm}\n                    handleClose={() => this.setState({showForm: false})} \n                    handleSubmission={() => this.handleSubmission()}\n                />}\n            </main>\n        );\n    }\n    \n}\n    export default ResidentsList;\n",["138","139"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/shared/tooltip/ParentTooltip.js",["140","141","142"],"import React, {useEffect, useState} from 'react';\nimport MedTooltip from \"./MedTooltip\";\nimport ResidentTooltip from \"./ResidentTooltip\";\n\nimport \"./ParentTooltip.css\";\n\nconst ParentTooltip = (props) => {\n    const {medicationsAtTime, isHovered, keepHovered, startHideTimer, xPos, yPos, msBeforePopoverVanish} = props;\n\n    //need to get a list of the residents.\n    let residentMeds = {};\n    medicationsAtTime.forEach(med => {\n        const {resident} = med;\n        if (!residentMeds[resident]) {\n            residentMeds[resident] = [med];\n        } else {\n            residentMeds[resident].push(med);\n        }\n    });\n\n\n    //if we have just 1 resident, we need to render a list of the medications.\n    //else render a list of the residents where you can view each of their medications.\n    const numbResidents = Object.keys(residentMeds).length;\n    let content;\n    if (numbResidents !== 0) {\n        content = <ResidentTooltip residentDict={residentMeds} msBeforePopoverVanish={msBeforePopoverVanish} />\n    }\n\n    return (\n        <div id={\"tooltip\"} style={{\"opacity\": isHovered ? 1 : 0, \"top\": isHovered ? yPos+\"px\" : \"-50px\", \"left\": isHovered ? xPos+\"px\" : \"0px\" }}\n             onMouseOver={() => {\n                 console.log(\"over\")\n                 keepHovered();\n             }}\n             onMouseLeave={() => {\n                 console.log(\"leave\");\n                 startHideTimer();\n             }}>\n            {content}\n        </div>\n    );\n};\n\nexport default ParentTooltip;",["143","144"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/Residentprofile.js",["145"],"import React, {useEffect, useState} from 'react';\nimport TitleBar from \"../shared/TitleBar\";\nimport Button from \"react-bootstrap/Button\";\nimport \"./Residentprofile.css\";\nimport EditResidentForm from \"./EditResidentForm\";\nimport {backendUrl, imagesUrl} from \"../config\";\nimport FileUploadBtn from \"../shared/FileUploadBtn\";\nimport Timeline from \"../shared/Timeline\";\n\n\n\nconst Residentprofile = (props) => {\n    const {resId, firstName} = props;\n\n    const [editForm, setEditForm] = useState(false);\n    const [residentImage, setResidentImage] = useState(\"\");\n    const [medicationDoses, setMedicationDoses] = useState([]);\n\n    let archived = props.archived;\n    let residentId = props.resId;\n\n    useEffect(() => {\n        getResImg();\n        getResDosages();\n    }, []) //empty array to signify this func should only run once\n\n    const getResImg = () => {\n        fetch(`${imagesUrl}/resident/${resId}`)\n            .then(r => {\n                console.log(\"changing image\")\n                setResidentImage(\"\");\n                setTimeout(() => setResidentImage(`${imagesUrl}/resident/${resId}`), 100);\n            })\n    }\n\n    const getResDosages = () => {\n        fetch(`${backendUrl}/medication/schedule/?residentId=${resId}`)\n            .then(r => r.json())\n            .then(r => {\n                console.log(r)\n                const dosages = r.map(x => {\n                    return {...x, time: new Date(x.time), resident: x.residentName.split(\" \")[0], dose: x.dose, medicationName:x.medicationName}\n                })\n                setMedicationDoses(dosages);\n            })\n    }\n\n    function submit(e) {\n        e.preventDefault();\n        (archived ? archived=false : archived=true);\n        const data = { residentId, archived };\n        console.log(data);\n        fetch(`${backendUrl}/resident`, { method: \"PUT\", body: JSON.stringify(data), headers: { \"Content-Type\": \"application/json\" } });\n        window.location.reload(false);\n    }\n\n    let residentImageSection;\n    if (residentImage !== \"\") {\n        residentImageSection = <div className={\"profile-pic\"} style={{\"backgroundImage\": `url(${imagesUrl}/resident/${resId})`}} alt=\"Resident profile image\" />\n    } else {\n        residentImageSection = <FileUploadBtn isResident={true} id={resId} name={firstName} onAddFile={() => getResImg()} />\n    }\n\n    //oldImgSrc=\"https://i.imgur.com/MI2Pf2H.jpg\"\n    return (\n        <main>\n            <TitleBar title={\"Resident Profile\"}>\n                <Button variant=\"primary\" onClick={() => setEditForm(true)}>edit</Button>\n                <Button variant=\"primary\" > medication [coming soon™]</Button>\n            </TitleBar>\n            <div className=\"container-fluid\">\n                <div className=\"row align-items-start\">\n                    <div className=\"col-md-3 .offset-md-2\">\n                        <div className={\"profile-img-container\"}>\n                            <div className={\"profile-pic-container\"}>\n                                {residentImageSection}\n                            </div>\n                            {residentImage !== \"\" ? <FileUploadBtn isResident={true} id={resId} name={firstName} onAddFile={() => getResImg()} edit={true} /> : \"\"}\n                        </div>\n                        <h1>{props.firstName} {props.archived ? \"[ARCHIVED]\" : \"\"}</h1>\n                        <h3>Age: {props.age}</h3>\n                        <h3>Guardian: {props.guardName}</h3>\n                        <h3>Contact Number: 02089991273</h3> \n                        <h3>E-mail:example@hotmail.co.uk</h3>\n                        <Button variant=\"secondary\" onClick={e => submit(e)}> {archived? \"Restore\" : \"Archive\"} </Button>\n                    </div>\n                    <div className=\"col-md-6\">\n                        <div className={\"resident-bio\"}>\n                            <h1>Bio</h1>\n                            <p>{props.bio}</p>\n                        </div>\n                        <div>\n                            <h1>Medication Schedule</h1>\n                            <Timeline dosages={medicationDoses} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n            {editForm && <EditResidentForm\n                    show={editForm}\n                    resId={props.resId}\n                    firstName={props.firstName}\n                    surName={props.surName}\n                    age={props.age}\n                    guardianName={props.guardName}\n                    bio={props.bio}\n                    handleClose={() => setEditForm(false)} \n                    handleSubmission={() => props.handleSubmission()}\n                />}\n        </main>\n    );\n}\n\nexport default Residentprofile;\n",["146","147"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/pharmacy/PharmacyPage.js",["148","149"],"import React from 'react';\n\nimport PharmacyPreview from \"./PharmacyPreview\";\nimport TitleBar from \"../shared/TitleBar\";\nimport Button from \"react-bootstrap/Button\";\n\nimport \"./PharmacyPage.css\";\nimport AddPharmacyForm from \"./AddPharmacyForm\";\nimport {backendUrl} from \"../config\";\n\nclass PharmacyPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {showForm: false};\n    }\n\n    render() {\n        let {pharmacies, careHomeId, pharmaciesHaveChanged} = this.props;\n        let {showForm} = this.state;\n        let pharmacyPreviews = pharmacies.map((pharmacy,idx) =>\n            <PharmacyPreview title={pharmacy.name} isDefault={pharmacy.default}\n                             hasPhone={pharmacy.phoneNumb} hasEmail={pharmacy.email}\n                             hasAddress={pharmacy.address && pharmacy.address.length>0} key={idx} /> );\n\n        return (\n            <main>\n                <TitleBar title={\"My Pharmacies\"}>\n                    <Button variant=\"primary\" onClick={() => this.setState({showForm: true})}>Add new</Button>\n                </TitleBar>\n                <div className={\"list\"}>\n                    {pharmacyPreviews}\n                </div>\n                {showForm && <AddPharmacyForm\n                    show={showForm}\n                    handleClose={() => this.setState({showForm: false})}\n                    handleSubmission={() => {\n                        pharmaciesHaveChanged();\n                        this.setState({showForm: false})\n                    }}\n                    careHomeId={this.props.careHomeId}\n                />}\n            </main>\n        );\n    }\n}\n\nexport default PharmacyPage;\n","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/email/EmailInquiry.js",["150"],"import React, {useEffect, useState} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport {backendUrl} from \"../config\";\nimport FullPageCentered from \"../shared/FullPageCentered\";\nimport List from \"../shared/List\";\nimport Quote from \"../shared/Quote\";\n\nconst EmailInquiry = (props) => {\n    const [comment, setComment] = useState(\"\");\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [careHomeName, setCareHomeName] = useState(\"-\");\n    const [residentName, setResidentName] = useState(\"-\");\n    const [medication, setMedication] = useState(\"-\");\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\n\n    //method to get the details of the medication from the database once the page loads\n    useEffect(() => {\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\n            .then(r => r.json())\n            .then(resp => {\n                console.log(resp);\n                setCareHomeName(resp.careHomeName || \"-\");\n                setResidentName(resp.residentName || \"-\");\n                setMedication(resp.medicationName || \"-\");\n                setComment(resp.pharmacyComment || \"\");\n            })\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\n\n    const submit = e => {\n        e.preventDefault();\n        fetch(`${backendUrl}/email/reject`, {method: \"POST\", body: JSON.stringify({comment,requestId}), headers: {\"Content-Type\": \"application/json\"}})\n            .then(response => response.json())\n            .then(r => {\n                console.log(r)\n                setIsSubmitted(true);\n            })\n            .catch(e => console.log(e));\n    }\n\n    let inquiryDetails = {\n        \"Care Home\": careHomeName,\n        Resident: residentName,\n        Medication: medication\n    }\n\n    if (!isSubmitted) {\n        return (\n            <FullPageCentered background={\"#f6d6ad\"} >\n                <h2>Inquiry needed</h2>\n                <List items={inquiryDetails}>\n                    <p>Inquiry comment</p>\n                    <textarea rows={4} onChange={e => setComment(e.target.value)} value={comment} />\n                </List>\n                <Button variant=\"primary\" onClick={e => submit(e)}>\n                    Let the care home know!\n                </Button>\n            </FullPageCentered>\n        );\n    } else {\n        return (\n            <FullPageCentered>\n                <h3>Inquiry submitted to the care home with the comment:</h3>\n                <Quote quote={comment} />\n            </FullPageCentered>\n        )\n    }\n}\n\nexport default EmailInquiry;\n","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/shared/Timeline.js",["151","152","153","154"],"import React, {useEffect, useRef, useState} from 'react';\nimport * as d3 from 'd3';\nimport {roundDateToNearestMins} from \"../helper/dateHelper\";\nimport ParentTooltip from \"./tooltip/ParentTooltip\";\n\nimport ReactDOM from 'react-dom';\n\n\nconst Timeline = (props) => {\n    const {dosages} = props;\n    const width = 1000;\n    const height = 200;\n    const roundToNearestMins = 30;\n    const msBeforePopoverVanish = 25;\n\n    console.log(dosages)\n\n    let time = new Date().getTime(); //not using state here as D3 won't view updated state...?\n    const [medsForTime, setMedsForTime] = useState([]);\n    const [isHovered, setIsHovered] = useState(false);\n    const [lastTimeoutId, setLastTimeoutId] = useState(0);\n    const [targetX, setTargetX] = useState(-200);\n    const [targetY, setTargetY] = useState(-200);\n\n    const ref = useRef();\n\n    let tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate()+1);\n    let xScale = d3.scaleTime()\n        .domain([new Date(new Date().toDateString()), new Date(tomorrow.toDateString())])\n        .range([0, width-20]);\n\n    useEffect(() => {\n        //setup initial svg & x axis\n        const svg = d3.select(ref.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .style(\"border\", \"1px solid black\");\n\n        svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + (height/2) + \")\")\n            .call(d3.axisBottom(xScale));\n    }, []);\n\n    useEffect(() => {\n        draw();\n    }, [dosages])\n\n    const draw = () => {\n        console.log(\"DRAWING\")\n        //first step should be we need to massage the data into a form we can use for our timeline.\n        //would like to have things grouped by hour. so go through the data and group it into objects by time.\n        const timedObjects = {};\n        console.log(dosages);\n        dosages.forEach(dosage => {\n            const {time} = dosage;\n            dosage.roundedTime = roundDateToNearestMins(time, roundToNearestMins);\n            if (!timedObjects[dosage.roundedTime]) {\n                timedObjects[dosage.roundedTime] = [dosage];\n            } else {\n                timedObjects[dosage.roundedTime].push(dosage);\n            }\n        });\n\n        console.log(timedObjects);\n        const data = Object.values(timedObjects);\n\n        const svg = d3.select(ref.current);\n\n        const rectWidth = getRectWidth(xScale, roundToNearestMins);\n        const rectHeight = height/4;\n\n\n        let selection = svg.selectAll(\"rect\")\n            .data(data)\n            .enter().append(\"rect\")\n            .attr(\"x\", d => xScale(d[0].roundedTime) - rectWidth/2)\n            .attr(\"width\", rectWidth)\n            .attr(\"y\", height/2 - rectHeight/2)\n            .attr(\"height\", rectHeight)\n            .on(\"mouseenter\", (event,data) => {\n                const rectPosition = event.target.getBoundingClientRect();\n                setTargetX(rectPosition.x + rectPosition.width/2);\n                setTargetY(rectPosition.bottom);\n                let {roundedTime} = data[0]\n                clearAllTimeouts();\n                if (roundedTime.getTime() !== time) {\n                    time = roundedTime.getTime()\n                    console.log(medsForTime);\n                    setMedsForTime(dosages.filter(dose => dose.roundedTime.getTime() === roundedTime.getTime()));\n                    setIsHovered(true);\n                }\n            })\n            .on(\"mouseover\", () => clearAllTimeouts())\n            .on(\"mouseout\", () => {\n                clearAllTimeouts();\n                setLastTimeoutId(setTimeout(() => setIsHovered(false), msBeforePopoverVanish));\n                time = 0;\n            });\n    }\n\n    const clearAllTimeouts = () => {\n        //ensuring all timeouts are deleted. as react is asynchronous trying to capture Ids in an array was causing bugs.\n        for (let i = 0; i<500 ; i++) {\n            clearTimeout(lastTimeoutId-i);\n        }\n        for (let i = 0; i<500 ; i++) {\n            clearTimeout(lastTimeoutId+i);\n        }\n    }\n\n    return (\n        <div>\n            <svg ref={ref}/>\n            <ParentTooltip medicationsAtTime={medsForTime} isHovered={isHovered}\n                           keepHovered={() => {\n                                clearAllTimeouts();\n                                setIsHovered(true);\n                            }}\n                           startHideTimer={() => {\n                                clearAllTimeouts();\n                               setLastTimeoutId(setTimeout(() => setIsHovered(false), msBeforePopoverVanish));\n                           }}\n                           xPos={targetX}\n                           yPos={targetY}\n                           msBeforePopoverVanish={msBeforePopoverVanish}\n            />\n        </div>\n    );\n}\n\nconst getRectWidth = (xScale, minsRoundedTo) => {\n    let posXMinsInFuture = xScale(new Date(new Date().setMinutes(new Date().getMinutes()+minsRoundedTo)));\n    let posNow = xScale(new Date());\n    return posXMinsInFuture - posNow;\n}\n\nexport default Timeline;","/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/medication/MedicationDose.js",["155","156"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/AddResidentForm.js",[],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/profile/ResidentPreview.js",["157","158","159","160","161"],"/Users/zahidali/Desktop/ReactGP/CS2001Group3-FrontEnd/src/helper/convertTimestampToDate.js",[],{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","replacedBy":"165"},{"ruleId":"162","replacedBy":"166"},{"ruleId":"164","replacedBy":"167"},{"ruleId":"162","replacedBy":"168"},{"ruleId":"164","replacedBy":"169"},{"ruleId":"162","replacedBy":"170"},{"ruleId":"164","replacedBy":"171"},{"ruleId":"172","severity":1,"message":"173","line":16,"column":8,"nodeType":"174","messageId":"175","endLine":16,"endColumn":21},{"ruleId":"172","severity":1,"message":"176","line":25,"column":8,"nodeType":"174","messageId":"175","endLine":25,"endColumn":23},{"ruleId":"172","severity":1,"message":"177","line":78,"column":11,"nodeType":"174","messageId":"175","endLine":78,"endColumn":31},{"ruleId":"172","severity":1,"message":"178","line":142,"column":11,"nodeType":"174","messageId":"175","endLine":142,"endColumn":28},{"ruleId":"179","severity":1,"message":"180","line":183,"column":15,"nodeType":"181","endLine":183,"endColumn":69},{"ruleId":"172","severity":1,"message":"182","line":1,"column":17,"nodeType":"174","messageId":"175","endLine":1,"endColumn":26},{"ruleId":"172","severity":1,"message":"183","line":3,"column":10,"nodeType":"174","messageId":"175","endLine":3,"endColumn":14},{"ruleId":"172","severity":1,"message":"184","line":4,"column":8,"nodeType":"174","messageId":"175","endLine":4,"endColumn":17},{"ruleId":"185","severity":1,"message":"186","line":29,"column":8,"nodeType":"187","endLine":29,"endColumn":10,"suggestions":"188"},{"ruleId":"162","replacedBy":"189"},{"ruleId":"164","replacedBy":"190"},{"ruleId":"191","severity":1,"message":"192","line":59,"column":58,"nodeType":"193","messageId":"194","endLine":59,"endColumn":60},{"ruleId":"191","severity":1,"message":"192","line":59,"column":79,"nodeType":"193","messageId":"194","endLine":59,"endColumn":81},{"ruleId":"162","replacedBy":"195"},{"ruleId":"164","replacedBy":"196"},{"ruleId":"172","severity":1,"message":"197","line":2,"column":8,"nodeType":"174","messageId":"175","endLine":2,"endColumn":14},{"ruleId":"172","severity":1,"message":"198","line":5,"column":8,"nodeType":"174","messageId":"175","endLine":5,"endColumn":12},{"ruleId":"172","severity":1,"message":"199","line":6,"column":8,"nodeType":"174","messageId":"175","endLine":6,"endColumn":13},{"ruleId":"172","severity":1,"message":"200","line":10,"column":12,"nodeType":"174","messageId":"175","endLine":10,"endColumn":23},{"ruleId":"185","severity":1,"message":"186","line":27,"column":8,"nodeType":"187","endLine":27,"endColumn":10,"suggestions":"201"},{"ruleId":"172","severity":1,"message":"202","line":40,"column":9,"nodeType":"174","messageId":"175","endLine":40,"endColumn":23},{"ruleId":"191","severity":1,"message":"192","line":50,"column":76,"nodeType":"193","messageId":"194","endLine":50,"endColumn":78},{"ruleId":"162","replacedBy":"203"},{"ruleId":"164","replacedBy":"204"},{"ruleId":"172","severity":1,"message":"205","line":1,"column":16,"nodeType":"174","messageId":"175","endLine":1,"endColumn":25},{"ruleId":"172","severity":1,"message":"206","line":1,"column":27,"nodeType":"174","messageId":"175","endLine":1,"endColumn":35},{"ruleId":"172","severity":1,"message":"207","line":2,"column":8,"nodeType":"174","messageId":"175","endLine":2,"endColumn":18},{"ruleId":"162","replacedBy":"208"},{"ruleId":"164","replacedBy":"209"},{"ruleId":"185","severity":1,"message":"210","line":25,"column":8,"nodeType":"187","endLine":25,"endColumn":10,"suggestions":"211"},{"ruleId":"162","replacedBy":"212"},{"ruleId":"164","replacedBy":"213"},{"ruleId":"172","severity":1,"message":"214","line":9,"column":9,"nodeType":"174","messageId":"175","endLine":9,"endColumn":19},{"ruleId":"172","severity":1,"message":"215","line":18,"column":26,"nodeType":"174","messageId":"175","endLine":18,"endColumn":36},{"ruleId":"185","severity":1,"message":"186","line":27,"column":8,"nodeType":"187","endLine":27,"endColumn":10,"suggestions":"216"},{"ruleId":"172","severity":1,"message":"217","line":6,"column":8,"nodeType":"174","messageId":"175","endLine":6,"endColumn":16},{"ruleId":"185","severity":1,"message":"218","line":43,"column":8,"nodeType":"187","endLine":43,"endColumn":10,"suggestions":"219"},{"ruleId":"185","severity":1,"message":"220","line":47,"column":8,"nodeType":"187","endLine":47,"endColumn":17,"suggestions":"221"},{"ruleId":"172","severity":1,"message":"222","line":74,"column":13,"nodeType":"174","messageId":"175","endLine":74,"endColumn":22},{"ruleId":"172","severity":1,"message":"206","line":1,"column":16,"nodeType":"174","messageId":"175","endLine":1,"endColumn":24},{"ruleId":"172","severity":1,"message":"223","line":12,"column":11,"nodeType":"174","messageId":"175","endLine":12,"endColumn":16},{"ruleId":"172","severity":1,"message":"224","line":2,"column":35,"nodeType":"174","messageId":"175","endLine":2,"endColumn":41},{"ruleId":"172","severity":1,"message":"225","line":2,"column":43,"nodeType":"174","messageId":"175","endLine":2,"endColumn":48},{"ruleId":"172","severity":1,"message":"183","line":2,"column":50,"nodeType":"174","messageId":"175","endLine":2,"endColumn":54},{"ruleId":"172","severity":1,"message":"176","line":8,"column":8,"nodeType":"174","messageId":"175","endLine":8,"endColumn":23},{"ruleId":"172","severity":1,"message":"226","line":9,"column":8,"nodeType":"174","messageId":"175","endLine":9,"endColumn":19},"no-native-reassign",["227"],"no-negated-in-lhs",["228"],["227"],["228"],["227"],["228"],["227"],["228"],"no-unused-vars","'ParentTooltip' is defined but never used.","Identifier","unusedVar","'Residentprofile' is defined but never used.","'practiceTimelineData' is assigned a value but never used.","'medicationsAtTime' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component Medication_TEMP must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'Component' is defined but never used.","'Link' is defined but never used.","'EmailPage' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'requestId'. Either include it or remove the dependency array.","ArrayExpression",["229"],["227"],["228"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["227"],["228"],"'Button' is defined but never used.","'List' is defined but never used.","'Quote' is defined but never used.","'isSubmitted' is assigned a value but never used.",["230"],"'inquiryDetails' is assigned a value but never used.",["227"],["228"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'MedTooltip' is defined but never used.",["227"],["228"],"React Hook useEffect has missing dependencies: 'getResDosages' and 'getResImg'. Either include them or remove the dependency array.",["231"],["227"],["228"],"'backendUrl' is defined but never used.","'careHomeId' is assigned a value but never used.",["232"],"'ReactDOM' is defined but never used.","React Hook useEffect has a missing dependency: 'xScale'. Either include it or remove the dependency array.",["233"],"React Hook useEffect has a missing dependency: 'draw'. Either include it or remove the dependency array.",["234"],"'selection' is assigned a value but never used.","'times' is assigned a value but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'ArchResProf' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"235","fix":"236"},{"desc":"235","fix":"237"},{"desc":"238","fix":"239"},{"desc":"235","fix":"240"},{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},"Update the dependencies array to be: [requestId]",{"range":"245","text":"246"},{"range":"247","text":"246"},"Update the dependencies array to be: [getResDosages, getResImg]",{"range":"248","text":"249"},{"range":"250","text":"246"},"Update the dependencies array to be: [xScale]",{"range":"251","text":"252"},"Update the dependencies array to be: [dosages, draw]",{"range":"253","text":"254"},[1406,1408],"[requestId]",[1237,1239],[768,770],"[getResDosages, getResImg]",[1226,1228],[1425,1427],"[xScale]",[1476,1485],"[dosages, draw]"]