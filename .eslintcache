[{"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/index.js":"1","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/App.js":"2","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/reportWebVitals.js":"3","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/pharmacy/PharmacyPage.js":"4","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/pharmacy/PharmacyPreview.js":"5","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/pharmacy/AddPharmacyForm.js":"6","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/config.js":"7","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/TitleBar.js":"8","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailPreview.js":"9","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailPage.js":"10","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailConfirmation.js":"11","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailInquiry.js":"12","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/FullPageCentered.js":"13","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/List.js":"14","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/Quote.js":"15","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/helper/convertTimestampToDate.js":"16","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/alerts/AlertsPage.js":"17","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/alerts/AlertItem.js":"18","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailReadyForCollection.js":"19","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailStatusCategories.js":"20"},{"size":500,"mtime":1606578955284,"results":"21","hashOfConfig":"22"},{"size":2145,"mtime":1610818495029,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1606578955284,"results":"24","hashOfConfig":"22"},{"size":1565,"mtime":1609094859444,"results":"25","hashOfConfig":"22"},{"size":664,"mtime":1609094984569,"results":"26","hashOfConfig":"22"},{"size":2842,"mtime":1609094922861,"results":"27","hashOfConfig":"22"},{"size":50,"mtime":1610818482229,"results":"28","hashOfConfig":"22"},{"size":377,"mtime":1606589657957,"results":"29","hashOfConfig":"22"},{"size":2149,"mtime":1610887058530,"results":"30","hashOfConfig":"22"},{"size":2915,"mtime":1610887209754,"results":"31","hashOfConfig":"22"},{"size":3618,"mtime":1609085329492,"results":"32","hashOfConfig":"22"},{"size":2712,"mtime":1609085329496,"results":"33","hashOfConfig":"22"},{"size":295,"mtime":1609085329496,"results":"34","hashOfConfig":"22"},{"size":421,"mtime":1609085329496,"results":"35","hashOfConfig":"22"},{"size":184,"mtime":1609085329500,"results":"36","hashOfConfig":"22"},{"size":293,"mtime":1609085329496,"results":"37","hashOfConfig":"22"},{"size":3920,"mtime":1610814734570,"results":"38","hashOfConfig":"22"},{"size":669,"mtime":1609218932928,"results":"39","hashOfConfig":"22"},{"size":2593,"mtime":1610817776699,"results":"40","hashOfConfig":"22"},{"size":233,"mtime":1610822117814,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"5tr2gy",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/index.js",[],["88","89"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/App.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/reportWebVitals.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/pharmacy/PharmacyPage.js",["90","91"],"import React from 'react';\n\nimport PharmacyPreview from \"./PharmacyPreview\";\nimport TitleBar from \"../shared/TitleBar\";\nimport Button from \"react-bootstrap/Button\";\n\nimport \"./PharmacyPage.css\";\nimport AddPharmacyForm from \"./AddPharmacyForm\";\nimport {backendUrl} from \"../config\";\n\nclass PharmacyPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {showForm: false};\n    }\n\n    render() {\n        let {pharmacies, careHomeId} = this.props;\n        let {showForm} = this.state;\n        let pharmacyPreviews = pharmacies.map((pharmacy,idx) =>\n            <PharmacyPreview title={pharmacy.name} isDefault={pharmacy.default}\n                             hasPhone={pharmacy.phoneNumb} hasEmail={pharmacy.email}\n                             hasAddress={pharmacy.address && pharmacy.address.length>0} key={idx} /> );\n\n        return (\n            <main>\n                <TitleBar title={\"My Pharmacies\"}>\n                    <Button variant=\"primary\" onClick={() => this.setState({showForm: true})}>Add new</Button>\n                </TitleBar>\n                <div className={\"list\"}>\n                    {pharmacyPreviews}\n                </div>\n                {showForm && <AddPharmacyForm\n                    show={showForm}\n                    handleClose={() => this.setState({showForm: false})}\n                    handleSubmission={() => this.setState({showForm: false})}\n                    careHomeId={this.props.careHomeId}\n                />}\n            </main>\n        );\n    }\n}\n\nexport default PharmacyPage;\n","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/pharmacy/PharmacyPreview.js",["92"],"import React from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport {EnvelopeFill, HouseFill, TelephoneFill} from \"react-bootstrap-icons\";\n\nimport \"./PharmacyPreview.css\";\n\nconst PharmacyPreview = (props) => (\n    <div className={`pharm-container`}>\n        <h4>{props.title}</h4>\n        <div className={\"icon-container\"}>\n                <TelephoneFill className={props.hasPhone ? \"completed\" : \"incomplete\"} />\n                <HouseFill className={props.hasAddress ? \"completed\" : \"incomplete\"} />\n                <EnvelopeFill className={props.hasEmail ? \"completed\" : \"incomplete\"} />\n        </div>\n    </div>\n);\n\nexport default PharmacyPreview;\n","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/pharmacy/AddPharmacyForm.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/config.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/TitleBar.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailPreview.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailPage.js",["93","94"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailConfirmation.js",["95"],"import React, {useEffect, useState} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport FullPageCentered from \"../shared/FullPageCentered\";\nimport List from \"../shared/List\";\nimport {backendUrl} from \"../config\";\nimport {convertToYYYYMMDD} from \"../helper/convertTimestampToDate\";\n\nconst EmailConfirmation = (props) => {\n    const [readyDate, setReadyDate] = useState(\"\");\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [careHomeName, setCareHomeName] = useState(\"-\");\n    const [residentName, setResidentName] = useState(\"-\");\n    const [medication, setMedication] = useState(\"-\");\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\n\n    //method to get the details of the medication from the database once the page loads\n    useEffect(() => {\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\n            .then(r => r.json())\n            .then(resp => {\n                console.log(resp);\n                setCareHomeName(resp.careHomeName || \"-\");\n                setResidentName(resp.residentName || \"-\");\n                setMedication(resp.medicationName || \"-\");\n                if (resp.dateMedicationToBeReady) { //if date is not set don't change default value\n                    setReadyDate(convertToYYYYMMDD(resp.dateMedicationToBeReady));\n                }\n            })\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\n\n\n    const submit = e => {\n        e.preventDefault();\n        console.log({readyDate, requestId});\n        fetch(`${backendUrl}/email/accept`, {method: \"POST\", body: JSON.stringify({readyDate,requestId}), headers: {\"Content-Type\": \"application/json\"}})\n            .then(response => response.json())\n            .then(r => {\n                console.log(r);\n                setIsSubmitted(true);\n            })\n            .catch(e => console.log(e));\n    }\n\n    //getting todays date so we can set the earliest date the medication is ready to today - i.e. the pharmacist cannot pick a past date\n    let now = new Date();\n    let today =  now.getFullYear() + \"-\" + (now.getMonth()+1) + \"-\" + now.getDate();\n\n    let inquiryDetails = {\n        \"Care Home\": careHomeName, Resident: residentName, Medication: medication\n    }\n\n    if (!isSubmitted) {\n        return (\n            <FullPageCentered background={\"#ccf6c8\"} >\n                <h2>Processing Medication</h2>\n                <List items={inquiryDetails}>\n                    <p>Date ready for collection:</p>\n                    <input type={\"date\"} min={today} onChange={e => setReadyDate(e.target.value)} value={readyDate} />\n                </List>\n                <Button variant=\"primary\" onClick={e => submit(e)}>\n                    Let the care home know!\n                </Button>\n            </FullPageCentered>\n        );\n    } else {\n        return (\n            <FullPageCentered>\n                <h3>Confirmation sent to the care home that they can pick up the medication on:</h3>\n                <h3>{readyDate}</h3>\n            </FullPageCentered>\n        )\n    }\n}\n\n\n// <Form>\n//     <h1>Confirming medication order</h1>\n//     <p>The date this medication should be available is:</p>\n//     <Form.Group controlId=\"date\">\n//         <Form.Control type=\"date\" min={today} onChange={e => setReadyDate(e.target.value)} />\n//     </Form.Group>\n//     <Button variant=\"primary\" onClick={e => submit(e)}>\n//         Confirm\n//     </Button>\n// </Form>\n\nexport default EmailConfirmation;\n","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailInquiry.js",["96"],"import React, {useEffect, useState} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport {backendUrl} from \"../config\";\nimport FullPageCentered from \"../shared/FullPageCentered\";\nimport List from \"../shared/List\";\nimport Quote from \"../shared/Quote\";\n\nconst EmailInquiry = (props) => {\n    const [comment, setComment] = useState(\"\");\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [careHomeName, setCareHomeName] = useState(\"-\");\n    const [residentName, setResidentName] = useState(\"-\");\n    const [medication, setMedication] = useState(\"-\");\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\n\n    //method to get the details of the medication from the database once the page loads\n    useEffect(() => {\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\n            .then(r => r.json())\n            .then(resp => {\n                console.log(resp);\n                setCareHomeName(resp.careHomeName || \"-\");\n                setResidentName(resp.residentName || \"-\");\n                setMedication(resp.medicationName || \"-\");\n                setComment(resp.pharmacyComment || \"\");\n            })\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\n\n    const submit = e => {\n        e.preventDefault();\n        fetch(`${backendUrl}/email/reject`, {method: \"POST\", body: JSON.stringify({comment,requestId}), headers: {\"Content-Type\": \"application/json\"}})\n            .then(response => response.json())\n            .then(r => {\n                console.log(r)\n                setIsSubmitted(true);\n            })\n            .catch(e => console.log(e));\n    }\n\n    let inquiryDetails = {\n        \"Care Home\": careHomeName,\n        Resident: residentName,\n        Medication: medication\n    }\n\n    if (!isSubmitted) {\n        return (\n            <FullPageCentered background={\"#f6d6ad\"} >\n                <h2>Inquiry needed</h2>\n                <List items={inquiryDetails}>\n                    <p>Inquiry comment</p>\n                    <textarea rows={4} onChange={e => setComment(e.target.value)} value={comment} />\n                </List>\n                <Button variant=\"primary\" onClick={e => submit(e)}>\n                    Let the care home know!\n                </Button>\n            </FullPageCentered>\n        );\n    } else {\n        return (\n            <FullPageCentered>\n                <h3>Inquiry submitted to the care home with the comment:</h3>\n                <Quote quote={comment} />\n            </FullPageCentered>\n        )\n    }\n}\n\nexport default EmailInquiry;\n","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/FullPageCentered.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/List.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/shared/Quote.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/helper/convertTimestampToDate.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/alerts/AlertsPage.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/alerts/AlertItem.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailReadyForCollection.js",["97","98"],"import React, {useEffect, useState} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport {backendUrl} from \"../config\";\nimport FullPageCentered from \"../shared/FullPageCentered\";\nimport List from \"../shared/List\";\nimport Quote from \"../shared/Quote\";\n\nconst EmailReadyForCollection = (props) => {\n    const [comment, setComment] = useState(\"\");\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [careHomeName, setCareHomeName] = useState(\"-\");\n    const [residentName, setResidentName] = useState(\"-\");\n    const [medication, setMedication] = useState(\"-\");\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\n\n    //method to get the details of the medication from the database once the page loads\n    useEffect(() => {\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\n            .then(r => r.json())\n            .then(resp => {\n                console.log(resp);\n                setCareHomeName(resp.careHomeName || \"-\");\n                setResidentName(resp.residentName || \"-\");\n                setMedication(resp.medicationName || \"-\");\n                setComment(resp.pharmacyComment || \"\");\n            })\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\n\n    const submit = e => {\n        e.preventDefault();\n        fetch(`${backendUrl}/email/ready-for-collection`, {method: \"POST\", body: JSON.stringify({comment,requestId}), headers: {\"Content-Type\": \"application/json\"}})\n            .then(response => response.json())\n            .then(r => {\n                console.log(r)\n                setIsSubmitted(true);\n            })\n            .catch(e => console.log(e));\n    }\n\n    let inquiryDetails = {\n        \"Care Home\": careHomeName,\n        Resident: residentName,\n        Medication: medication\n    }\n\n    if (!isSubmitted) {\n        return (\n            <FullPageCentered background={\"#DCFFFB\"} >\n                <h2>Medication is ready to Collect!</h2>\n                <List items={inquiryDetails} />\n                <Button variant=\"primary\" onClick={e => submit(e)}>\n                    The care home can collect the medication!\n                </Button>\n            </FullPageCentered>\n        );\n    } else {\n        return (\n            <FullPageCentered>\n                <h3>{careHomeName} will be notified that {medication} is ready to collect!</h3>\n            </FullPageCentered>\n        )\n    }\n}\n\nexport default EmailReadyForCollection;\n","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailStatusCategories.js",[],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":9,"column":9,"nodeType":"105","messageId":"106","endLine":9,"endColumn":19},{"ruleId":"103","severity":1,"message":"107","line":18,"column":26,"nodeType":"105","messageId":"106","endLine":18,"endColumn":36},{"ruleId":"103","severity":1,"message":"108","line":2,"column":8,"nodeType":"105","messageId":"106","endLine":2,"endColumn":14},{"ruleId":"109","severity":1,"message":"110","line":40,"column":58,"nodeType":"111","messageId":"112","endLine":40,"endColumn":60},{"ruleId":"109","severity":1,"message":"110","line":40,"column":79,"nodeType":"111","messageId":"112","endLine":40,"endColumn":81},{"ruleId":"113","severity":1,"message":"114","line":29,"column":8,"nodeType":"115","endLine":29,"endColumn":10,"suggestions":"116"},{"ruleId":"113","severity":1,"message":"114","line":27,"column":8,"nodeType":"115","endLine":27,"endColumn":10,"suggestions":"117"},{"ruleId":"103","severity":1,"message":"118","line":6,"column":8,"nodeType":"105","messageId":"106","endLine":6,"endColumn":13},{"ruleId":"113","severity":1,"message":"114","line":27,"column":8,"nodeType":"115","endLine":27,"endColumn":10,"suggestions":"119"},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"no-unused-vars","'backendUrl' is defined but never used.","Identifier","unusedVar","'careHomeId' is assigned a value but never used.","'Button' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'requestId'. Either include it or remove the dependency array.","ArrayExpression",["122"],["123"],"'Quote' is defined but never used.",["124"],"no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},{"desc":"125","fix":"127"},{"desc":"125","fix":"128"},"Update the dependencies array to be: [requestId]",{"range":"129","text":"130"},{"range":"131","text":"130"},{"range":"132","text":"130"},[1411,1413],"[requestId]",[1226,1228],[1237,1239]]