[{"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailPage.js":"1","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/alerts/AlertsPage.js":"2","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailSetDate.js":"3","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/App.js":"4","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/medication/MedicationForm.js":"5","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/medication/MedicationDose.js":"6","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/ShowEmailContent.js":"7","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/helper/dateHelper.js":"8","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/alerts/AlertItem.js":"9"},{"size":3722,"mtime":1612248267826,"results":"10","hashOfConfig":"11"},{"size":4177,"mtime":1612251572441,"results":"12","hashOfConfig":"11"},{"size":3274,"mtime":1610895199139,"results":"13","hashOfConfig":"11"},{"size":2298,"mtime":1612636887467,"results":"14","hashOfConfig":"11"},{"size":4723,"mtime":1612639688695,"results":"15","hashOfConfig":"11"},{"size":2484,"mtime":1612632923098,"results":"16","hashOfConfig":"11"},{"size":637,"mtime":1611502882682,"results":"17","hashOfConfig":"11"},{"size":168,"mtime":1612636194700,"results":"18","hashOfConfig":"11"},{"size":669,"mtime":1610894327474,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"7v4c1w",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailPage.js",["42","43"],"import React from 'react';\n\nimport TitleBar from \"../shared/TitleBar\";\nimport Form from \"react-bootstrap/Form\";\n\nimport \"./EmailPage.css\";\n\nimport {backendUrl} from \"../config\";\nimport EmailPreview from \"./EmailPreview\";\n\nimport {READY, ASKED_IF_READY, SENT_INITIAL_EMAIL, PROCESSING, INQUIRY, COMPLETE} from \"./EmailStatusCategories\";\nimport ShowEmailContent from \"./ShowEmailContent\";\n\n\nclass EmailPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {emailType:\"All\", emails: [], emailHtml: \"\", showEmailHtml: \"\"};\n    }\n\n    componentDidMount() {\n        this.getDataFromDb();\n    }\n\n    getDataFromDb() {\n        fetch(`${backendUrl}/email?careHomeId=1`)\n            .then(response => response.text())\n            .then(response => {\n                console.log(JSON.parse(response))\n                this.setState({emails: JSON.parse(response)})\n            })\n    }\n\n    showEmailContent(nonGuessableId) {\n        fetch(`${backendUrl}/email/show-email-content?id=${nonGuessableId}`)\n            .then(response => response.text())\n            .then(response => {\n                this.setState({emailHtml: JSON.parse(response).emailHtml, showEmailHtml: true})\n            })\n    }\n\n    hideEmailContent() {\n        this.setState({showEmailHtml: false, emailHtml: \"\"})\n    }\n\n    render() {\n        let {emails, emailType} = this.state;\n        // emails = [\n        //     {residentName: \"Gerald Hornet\", medicationName:\"Paracetamol 20 tablets 25g\", pharmacyName:\"Croyden corner\", dateSent:\"02-12-20 12:34\", dateResponded: null, status:\"unresponded\"},\n        //     {residentName: \"Mary Whippersville\", medicationName:\"IbuProfen 20 tablets 25g\", pharmacyName:\"Croyden corner\", dateSent:\"02-12-20 12:34\", dateResponded: null, status:\"accepted\"},\n        //     {residentName: \"Guy from trainspotting\", medicationName:\"1kg heroin\", pharmacyName:\"Croyden corner\", dateSent:\"02-12-20 12:34\", dateResponded: null, status:\"rejected\"}\n        // ]\n        let emailPreviews = emails.filter(x => emailType == \"All\" || x.status == emailType)\n            .map((email,idx) =>\n            <EmailPreview resident={email.residentName} medication={email.medicationName} pharmacy={email.pharmacyEmail} dateLastEmailSent={email.dateLastEmailSent}\n                          dateResponded={email.dateUpdatedByPharmacy} dateMedicationToBeReady={email.dateMedicationToBeReady} inquiryComment={email.pharmacyComment}\n                          status={email.status} nonGuessableId={email.nonGuessableId} showEmailContent={() => this.showEmailContent(email.nonGuessableId)} key={idx} />\n        );\n\n        return (\n            <main>\n                <TitleBar title={\"Emails Sent\"}>\n                    <Form.Control as={\"select\"} custom onChange={(e) => {\n                        console.log(e)\n                        console.log(e.target.value.toLowerCase())\n                        this.setState({emailType: e.target.value})}\n                    } >\n                        <option>All</option>\n                        <option>{SENT_INITIAL_EMAIL}</option>\n                        <option>{PROCESSING}</option>\n                        <option>{INQUIRY}</option>\n                        <option>{ASKED_IF_READY}</option>\n                        <option>{READY}</option>\n                        <option>{COMPLETE}</option>\n                    </Form.Control>\n                </TitleBar>\n                <div className={\"list\"}>\n                    {emailPreviews}\n                </div>\n                <ShowEmailContent show={this.state.showEmailHtml} close={() => this.hideEmailContent()} emailHtml={this.state.emailHtml}/>\n            </main>\n        );\n    }\n}\n\nexport default EmailPage;\n",["44","45"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/alerts/AlertsPage.js",[],["46","47"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/EmailSetDate.js",["48"],"import React, {useEffect, useState} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport FullPageCentered from \"../shared/FullPageCentered\";\nimport List from \"../shared/List\";\nimport {backendUrl} from \"../config\";\nimport {convertToYYYYMMDD} from \"../helper/convertTimestampToDate\";\n\nconst EmailSetDate = (props) => {\n    const [readyDate, setReadyDate] = useState(\"\");\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [careHomeName, setCareHomeName] = useState(\"-\");\n    const [residentName, setResidentName] = useState(\"-\");\n    const [medication, setMedication] = useState(\"-\");\n    const requestId = props.location.search.substring(1); //using substring as otherwise it includes the ? at the beginning\n\n    //method to get the details of the medication from the database once the page loads\n    useEffect(() => {\n        fetch(`${backendUrl}/email/details?id=${requestId}`)\n            .then(r => r.json())\n            .then(resp => {\n                console.log(resp);\n                setCareHomeName(resp.careHomeName || \"-\");\n                setResidentName(resp.residentName || \"-\");\n                setMedication(resp.medicationName || \"-\");\n                if (resp.dateMedicationToBeReady) { //if date is not set don't change default value\n                    setReadyDate(convertToYYYYMMDD(resp.dateMedicationToBeReady));\n                }\n            })\n    }, []); //adding empty array here to ensure that useEffect only fires once. the func tests whether it should fire by testing whether this arg has changed\n\n\n    const submit = e => {\n        e.preventDefault();\n        console.log({readyDate, requestId});\n        fetch(`${backendUrl}/email/accept`, {\n            method: \"POST\",\n            body: JSON.stringify({readyDate, requestId}),\n            headers: {\"Content-Type\": \"application/json\"}\n        })\n            .then(response => response.json())\n            .then(r => {\n                console.log(r);\n                setIsSubmitted(true);\n            })\n            .catch(e => console.log(e));\n    }\n\n    //getting todays date so we can set the earliest date the medication is ready to today - i.e. the pharmacist cannot pick a past date\n    let now = new Date();\n    let today = now.getFullYear() + \"-\" + (now.getMonth() + 1) + \"-\" + now.getDate();\n\n    let inquiryDetails = {\n        \"Care Home\": careHomeName, Resident: residentName, Medication: medication\n    }\n\n    if (!isSubmitted) {\n        return (\n            <FullPageCentered background={\"#ccf6c8\"}>\n                <h2>Processing Medication</h2>\n                <List items={inquiryDetails}>\n                    <p>Date ready for collection:</p>\n                    <input type={\"date\"} min={today} onChange={e => setReadyDate(e.target.value)} value={readyDate}/>\n                </List>\n                <Button variant=\"primary\" onClick={e => submit(e)}>\n                    Let the care home know!\n                </Button>\n            </FullPageCentered>\n        );\n    } else {\n        return (\n            <FullPageCentered>\n                <h3>Confirmation sent to the care home that they can pick up the medication on:</h3>\n                <h3>{readyDate}</h3>\n            </FullPageCentered>\n        )\n    }\n}\n\nexport default EmailSetDate;\n","/home/peter/Documents/uni/projects/cs2001group3-frontend/src/App.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/medication/MedicationForm.js",["49"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/medication/MedicationDose.js",["50","51","52"],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/email/ShowEmailContent.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/helper/dateHelper.js",[],"/home/peter/Documents/uni/projects/cs2001group3-frontend/src/alerts/AlertItem.js",[],{"ruleId":"53","severity":1,"message":"54","line":53,"column":58,"nodeType":"55","messageId":"56","endLine":53,"endColumn":60},{"ruleId":"53","severity":1,"message":"54","line":53,"column":79,"nodeType":"55","messageId":"56","endLine":53,"endColumn":81},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"57","replacedBy":"61"},{"ruleId":"59","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":29,"column":8,"nodeType":"65","endLine":29,"endColumn":10,"suggestions":"66"},{"ruleId":"67","severity":1,"message":"68","line":50,"column":11,"nodeType":"69","messageId":"70","endLine":50,"endColumn":35},{"ruleId":"67","severity":1,"message":"71","line":1,"column":16,"nodeType":"69","messageId":"70","endLine":1,"endColumn":24},{"ruleId":"67","severity":1,"message":"72","line":5,"column":8,"nodeType":"69","messageId":"70","endLine":5,"endColumn":14},{"ruleId":"67","severity":1,"message":"73","line":12,"column":11,"nodeType":"69","messageId":"70","endLine":12,"endColumn":16},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["74"],"no-negated-in-lhs",["75"],["74"],["75"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'requestId'. Either include it or remove the dependency array.","ArrayExpression",["76"],"no-unused-vars","'getPharmaciesForCareHome' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Button' is defined but never used.","'times' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"77","fix":"78"},"Update the dependencies array to be: [requestId]",{"range":"79","text":"80"},[1406,1408],"[requestId]"]